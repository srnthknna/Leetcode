{"id":490137864,"lang":"java","time":"9 months, 3 weeks","timestamp":1620414942,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/490137864/","is_pending":"Not Pending","title":"01 Matrix","memory":"42.1 MB","code":"class Solution {\n    public int[][] updateMatrix(int[][] mat) {\n        int rows = mat.length;\n        if (rows == 0) return mat;\n        int cols = mat[0].length;\n        int[][] dist = new int[rows][cols];\n        for (int i = 0; i < rows; i++) \n            for (int j = 0; j < cols; j++) \n                dist[i][j] = 1000000;\n        \n        for (int i = 0; i < rows; i++)\n            for (int j = 0; j < cols; j ++) {\n                if (mat[i][j] == 0) {\n                    dist[i][j] = 0;\n                } else {\n                    if (i > 0) \n                        dist[i][j] = Math.min(dist[i][j], dist[i - 1][j] + 1);\n                    if (j > 0) \n                        dist[i][j] = Math.min(dist[i][j], dist[i][j - 1] + 1);\n                }\n            }\n        \n        for (int i = rows - 1; i >= 0; i--) \n            for (int j = cols - 1; j >= 0; j--) {\n                if (i < rows - 1) \n                    dist[i][j] = Math.min(dist[i][j], dist[i + 1][j] + 1);\n                if (j < cols - 1)\n                    dist[i][j] = Math.min(dist[i][j], dist[i][j + 1] + 1);\n            }\n        return dist;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"01-matrix"}