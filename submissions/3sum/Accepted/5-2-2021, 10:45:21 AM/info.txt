{"id":487959605,"lang":"java","time":"10Â months","timestamp":1619977521,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/487959605/","is_pending":"Not Pending","title":"3Sum","memory":"42.3 MB","code":"class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length && nums[i] <= 0; i++) {\n            if (i == 0 || nums[i - 1] != nums[i]) {\n                twoSum(nums, i, res);\n            }\n        }\n        return res;\n    }\n    \n    private void twoSum(int[] nums, int i, List<List<Integer>> res) {\n        int low = i + 1, high = nums.length - 1;\n        while (low < high) {\n            int sum = nums[i] + nums[low] + nums[high];\n            if (sum < 0) {\n                low++;\n            } else if (sum > 0) {\n                high--;\n            } else {\n                res.add(Arrays.asList(nums[i], nums[low++], nums[high--]));\n                while (low < high && nums[low] == nums[low - 1]) {\n                    low++;\n                }\n            }\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum"}