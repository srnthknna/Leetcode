{"id":574923462,"lang":"java","time":"4 months, 1 week","timestamp":1634830489,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/574923462/","is_pending":"Not Pending","title":"Accounts Merge","memory":"71.3 MB","code":"class Solution {\n    // https://www.youtube.com/watch?v=J5YnIxbG3hw\n    // DFS with union find\n    // How is this union find? the g we build undirected graph between the email connections\n    // Then we do a dfs to combile all the emails that are associated\n    // We sort the emails associated for order\n    // Then just add the name in front to make them accepted in the solution\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\n        Map<String, Set<String>> g = new HashMap<>();\n        Map<String, String> emailToName = new HashMap<>();\n        buildGraph(g, accounts, emailToName);\n        \n        List<List<String>> result = new ArrayList<>();\n        Set<String> visited = new HashSet<>();\n        \n        for (String mail : emailToName.keySet()) {\n            \n            if (visited.add(mail)) {\n                List<String> list = new ArrayList<>();\n                list.add(mail);\n                dfs(list, visited, g, mail);\n                Collections.sort(list);\n                list.add(0, emailToName.get(mail));\n                result.add(list);\n            }\n        }\n        return result;\n    }\n    \n    private void buildGraph(Map<String, Set<String>> g, List<List<String>> accounts, Map<String, String> emailToName) {\n        for (List<String> a: accounts) {\n            String name = a.get(0);\n            \n            for (int i = 1; i < a.size(); i++) {\n                String mail = a.get(i);\n                emailToName.put(mail, name);\n                g.putIfAbsent(mail, new HashSet<>());\n                if (i == 1) continue;\n                String prev = a.get(i - 1);\n                g.get(mail).add(prev);\n                g.get(prev).add(mail);\n            }\n        }\n    }\n    \n    private void dfs(List<String> list, Set<String> visited, Map<String, Set<String>> g, String mail) {\n        if (g.get(mail) == null || g.get(mail).size() == 0) return;\n        \n        for (String neigh : g.get(mail)) {\n            if (visited.add(neigh)) {\n                list.add(neigh);\n                dfs(list, visited, g, neigh);\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"accounts-merge"}