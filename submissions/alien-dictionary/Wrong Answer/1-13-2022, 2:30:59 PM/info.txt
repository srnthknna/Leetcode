{"id":619266454,"lang":"java","time":"1 month, 2 weeks","timestamp":1642113059,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/619266454/","is_pending":"Not Pending","title":"Alien Dictionary","memory":"N/A","code":"class Solution {\n    public String alienOrder(String[] words) {\n        Map<Character, Integer> counts = new HashMap<>();\n        Map<Character, Set<Character>> graph = new HashMap<>();\n        \n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                graph.put(c, new HashSet<Character>());\n                counts.put(c, 0);\n            }\n        }\n        \n        for (int i = 1; i < words.length; i++) {\n            String first = words[i - 1], second = words[i];\n            \n            int len = Math.min(first.length(), second.length());\n            if (first.length() > second.length() && first.startsWith(second)) return \"\";\n            \n            for (int j = 0; j < len; j++) {\n                if (first.charAt(j) != second.charAt(j)) {\n                    char out = first.charAt(j), in = second.charAt(j);\n                    if (!graph.get(out).contains(in)) {\n                        graph.get(out).add(in);\n                        counts.put(in, counts.get(in) + 1);\n                    }\n                }\n            }\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        Queue<Character> queue = new LinkedList<>();\n        \n        for (char c : counts.keySet()) {\n            if (counts.get(c) == 0) {\n                queue.offer(c);\n            }\n        }\n        \n        while (!queue.isEmpty()) {\n            char curr = queue.poll();\n            sb.append(curr);\n            \n            for (char neigh : graph.get(curr)) {\n                counts.put(neigh, counts.get(neigh) - 1);\n                if (counts.get(neigh) == 0) {\n                    queue.offer(neigh);\n                }\n            }\n        }\n        System.out.println(sb.toString());\n        \n        return sb.length() == counts.size() ? sb.toString() : \"\";\n    }\n}","compare_result":"1111111111011101111010111001111011111101111111111110110111101111101111111010011101110111011110011011111111111111111111101110111","title_slug":"alien-dictionary"}