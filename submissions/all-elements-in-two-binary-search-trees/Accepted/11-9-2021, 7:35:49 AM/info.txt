{"id":584529644,"lang":"java","time":"3 months, 2 weeks","timestamp":1636472149,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/584529644/","is_pending":"Not Pending","title":"All Elements in Two Binary Search Trees","memory":"41.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {\n        ArrayDeque<TreeNode> stack1 = new ArrayDeque<>(), stack2 = new ArrayDeque<>();\n        List<Integer> output = new ArrayList<>();\n        \n        while (root1 != null || root2 != null || !stack1.isEmpty() || !stack2.isEmpty()) {\n            while (root1 != null) {\n                stack1.push(root1);\n                root1 = root1.left;\n            }\n\n            while (root2 != null) {\n                stack2.push(root2);\n                root2 = root2.left;\n            }\n\n            if (stack2.isEmpty() || !stack1.isEmpty() && stack1.getFirst().val <= stack2.getFirst().val) {\n                root1 = stack1.pop();\n                output.add(root1.val);\n                root1 = root1.right;\n            } else {\n                root2 = stack2.pop();\n                output.add(root2.val);\n                root2 = root2.right;\n            }\n        }\n        return output;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"all-elements-in-two-binary-search-trees"}