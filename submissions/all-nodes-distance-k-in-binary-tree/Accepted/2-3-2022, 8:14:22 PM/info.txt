{"id":634109692,"lang":"java","time":"3 weeks, 2 days","timestamp":1643948062,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/634109692/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"43.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {\n        Map<TreeNode, TreeNode> nodeToParent = new HashMap<>();\n        // We build the parent links\n        buildParent(root, nodeToParent);\n        // Create the output list\n        List<Integer> answer = new ArrayList<>();\n        Queue<TreeNode> queue = new LinkedList<>();\n        Set<TreeNode> visited = new HashSet<>();\n        queue.offer(target);\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode curr = queue.poll();\n                visited.add(curr);\n                if (curr != null) {\n                    if (k == 0) {\n                        answer.add(curr.val);\n                    }\n                    if (nodeToParent.containsKey(curr) && !visited.contains(nodeToParent.get(curr))) {\n                        queue.offer(nodeToParent.get(curr));\n                    }\n                    if (curr.left != null && !visited.contains(curr.left)) {\n                        queue.offer(curr.left);\n                    }\n                    if (curr.right != null && !visited.contains(curr.right)) {\n                        queue.offer(curr.right);\n                    }\n                }\n            }\n            k--;\n            if (k == -1) break;\n        }\n        return answer;\n        \n    }\n    \n    private void buildParent(TreeNode root, Map<TreeNode, TreeNode> nodeToParent) {\n        if (root == null) return;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            TreeNode curr = queue.poll();\n            if (curr.left != null) {\n                nodeToParent.put(curr.left, curr);\n                queue.offer(curr.left);\n            }\n            if (curr.right != null) {\n                nodeToParent.put(curr.right, curr);\n                queue.offer(curr.right);\n            }\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree"}