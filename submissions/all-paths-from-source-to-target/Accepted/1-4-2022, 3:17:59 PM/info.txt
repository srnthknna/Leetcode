{"id":613178427,"lang":"java","time":"1 month, 3 weeks","timestamp":1641338279,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/613178427/","is_pending":"Not Pending","title":"All Paths From Source to Target","memory":"41.6 MB","code":"class Solution {\n    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {\n        List<List<Integer>> result = new ArrayList<>();\n        Queue<List<Integer>> queue = new LinkedList<>();\n        queue.add(Arrays.asList(0));\n        int goalNode = graph.length - 1;\n        while (!queue.isEmpty()) {\n            List<Integer> curr = queue.poll();\n            int lastNode = curr.get(curr.size() - 1);\n            if (lastNode== goalNode) {\n                result.add(curr);\n            } else {\n                int[] neigh = graph[lastNode];\n                for (int n : neigh) {\n                    List<Integer> newCurr = new ArrayList<>(curr);\n                    newCurr.add(n);\n                    queue.add(newCurr);\n                }\n            }\n        }\n        return result;\n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"all-paths-from-source-to-target"}