{"id":584028575,"lang":"java","time":"3 months, 3 weeks","timestamp":1636388887,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/584028575/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"42.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode balanceBST(TreeNode root) {\n        List<Integer> nodes = new ArrayList<>();\n        inorder(root, nodes);\n        return build(0, nodes.size() - 1, nodes);\n    }\n    \n    private void inorder(TreeNode root, List<Integer> nodes) {\n        if (root == null) \n            return;\n        inorder(root.left, nodes);\n        nodes.add(root.val);\n        inorder(root.right, nodes);\n    }\n    \n    private TreeNode build(int start, int end, List<Integer> nodes) {\n        if (start > end) \n            return null;\n        int mid = (start + end) / 2;\n        \n        TreeNode root = new TreeNode(nodes.get(mid));\n        root.left = build(start, mid - 1, nodes);\n        root.right = build(mid + 1, end, nodes);\n        return root;\n    }\n    \n}","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree"}