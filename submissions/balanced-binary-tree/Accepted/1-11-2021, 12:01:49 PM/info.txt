{"id":441716740,"lang":"java","time":"1 year, 1 month","timestamp":1610395309,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/441716740/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"39.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        if (root == null) return true;\n        return Math.abs(height(root.left) - height(root.right)) < 2 && isBalanced(root.left) && isBalanced(root.right);\n    }\n    \n    private int height(TreeNode root) {\n        if (root == null) return 0;\n        \n        return 1 + Math.max(height(root.left), height(root.right));\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree"}