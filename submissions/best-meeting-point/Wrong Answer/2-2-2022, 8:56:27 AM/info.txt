{"id":633074212,"lang":"java","time":"3 weeks, 4 days","timestamp":1643820987,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/633074212/","is_pending":"Not Pending","title":"Best Meeting Point","memory":"N/A","code":"class Solution {\n    public int minTotalDistance(int[][] grid) {\n        List<Integer> xcord = new ArrayList<>(), ycord = new ArrayList<>();\n        int rows = grid.length, cols = grid[0].length;\n        for (int i = 0; i < rows; i++)\n            for (int j = 0; j < cols; j++)\n                if (grid[i][j] == 1)\n                    xcord.add(i);\n        for (int i = 0; i < cols; i++) \n            for (int j = 0; j < rows; j++)\n                if (grid[j][i] == 1)\n                    ycord.add(j);\n        int xmid = xcord.get(xcord.size() / 2), ymid = ycord.get(ycord.size() / 2), dist = 0;\n        for (int xval : xcord)\n            dist += Math.abs(xval - xmid);\n        for (int yval : ycord)\n            dist += Math.abs(yval - ymid);\n        return dist;\n    }\n}","compare_result":"1000001000000000000000000000000000000000000000000000000000","title_slug":"best-meeting-point"}