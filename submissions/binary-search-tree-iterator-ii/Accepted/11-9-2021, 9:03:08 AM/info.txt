{"id":584566164,"lang":"java","time":"3 months, 2 weeks","timestamp":1636477388,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/584566164/","is_pending":"Not Pending","title":"Binary Search Tree Iterator II","memory":"66 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    \n    List<Integer> arr;\n    int n;\n    int pointer;\n    \n    private void inorder(TreeNode root) {\n        if (root == null) return;\n        inorder(root.left);\n        arr.add(root.val);\n        inorder(root.right);\n    }\n\n    public BSTIterator(TreeNode root) {\n        arr = new ArrayList<>();\n        inorder(root);\n        n = arr.size();\n        pointer = -1;\n    }\n    \n    public boolean hasNext() {\n        return pointer < n - 1;\n    }\n    \n    public int next() {\n        pointer++;\n        return arr.get(pointer);\n    }\n    \n    public boolean hasPrev() {\n        return pointer > 0;\n    }\n    \n    public int prev() {\n        pointer--;\n        return arr.get(pointer);\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * boolean param_1 = obj.hasNext();\n * int param_2 = obj.next();\n * boolean param_3 = obj.hasPrev();\n * int param_4 = obj.prev();\n */","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator-ii"}