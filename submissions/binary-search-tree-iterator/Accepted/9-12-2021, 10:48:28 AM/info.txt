{"id":553755912,"lang":"java","time":"5 months, 2 weeks","timestamp":1631468908,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/553755912/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"48.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    \n    Stack<TreeNode> stack;\n    public BSTIterator(TreeNode root) {\n        stack = new Stack<>();\n        \n        leftmostInorder(root);\n    }\n    \n    private void leftmostInorder(TreeNode root) {\n        while (root != null) {\n            stack.push(root);\n            root = root.left;\n        }\n    }\n    \n    public int next() {\n        TreeNode node = stack.pop();\n        \n        if (node.right != null)\n            leftmostInorder(node.right);\n        return node.val;\n    }\n    \n    public boolean hasNext() {\n        return stack.size() > 0;\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}