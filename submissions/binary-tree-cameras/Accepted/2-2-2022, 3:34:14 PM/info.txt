{"id":633276177,"lang":"java","time":"3 weeks, 4 days","timestamp":1643844854,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/633276177/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"41.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    // https://www.youtube.com/watch?v=2Gh5WPjAgJk\n    \n    int cam = 0;\n    public int minCameraCover(TreeNode root) {\n        return dfs(root) == 0 ? cam + 1 : cam;\n    }\n    \n    //States\n    // 2 has camera\n    // 1 has been covered\n    // 0 needs to be covered\n    private int dfs(TreeNode root) {\n        if (root == null) return 1;\n        \n        int left = dfs(root.left);\n        int right = dfs(root.right);\n        \n        if (left == 0 || right == 0) {\n            cam++;\n            return 2;\n        } else if (left == 2 || right == 2) {\n            return 1;\n        }\n        return 0;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}