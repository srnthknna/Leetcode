{"id":437311412,"lang":"java","time":"1 year, 1 month","timestamp":1609548568,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/437311412/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"39.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<TreeNode> curr = new ArrayList<>(), next;\n        List<List<Integer>> output = new ArrayList<>();\n        \n        if (root == null) return output;\n        curr.add(root);\n        \n        while(!curr.isEmpty()) {\n            next = new ArrayList<>();\n            for (TreeNode n : curr) {\n                if (n.left != null)\n                   next.add(n.left);\n                if (n.right != null)\n                   next.add(n.right);\n            }\n            output.add(curr.stream().map(n -> n.val).collect(Collectors.toList()));\n            \n            curr = next;\n        }\n        \n        return output;\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal"}