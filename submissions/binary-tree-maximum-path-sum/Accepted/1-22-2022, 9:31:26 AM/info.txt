{"id":625411990,"lang":"java","time":"1Â month","timestamp":1642872686,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/625411990/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"41.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int maxSum = Integer.MIN_VALUE;\n    public int maxPathSum(TreeNode root) {\n        helper(root);\n        return maxSum;\n    }\n    \n    private int helper(TreeNode root) {\n        if (root == null) return 0;\n        \n        int leftSum = Math.max(helper(root.left), 0);\n        int rightSum = Math.max(helper(root.right), 0);\n        maxSum = Math.max(maxSum, root.val + leftSum + rightSum);\n        \n        return root.val + Math.max(leftSum, rightSum);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum"}