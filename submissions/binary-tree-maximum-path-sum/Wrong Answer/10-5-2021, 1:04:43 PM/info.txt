{"id":566399187,"lang":"java","time":"4 months, 3 weeks","timestamp":1633464283,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/566399187/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int maxSum = Integer.MIN_VALUE;\n    public int maxPathSum(TreeNode root) {\n        helper(root);\n        return maxSum;\n    }\n    \n    private int helper(TreeNode root) {\n        if (root == null)\n            return 0;\n        if (root.left == null && root.right == null) {\n            return root.val;\n        }\n        int leftSum = Math.max(helper(root.left), 0);\n        int rightSum = Math.max(helper(root.right), 0);\n        \n        maxSum = Math.max(leftSum + rightSum + root.val, maxSum);\n        return Math.max(leftSum + root.val, rightSum + root.val);\n    }\n}","compare_result":"1100011001110101110111111111011111111011111111011111111011101111010111111101101101111111111111","title_slug":"binary-tree-maximum-path-sum"}