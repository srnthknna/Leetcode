{"id":575524983,"lang":"java","time":"4 months, 1 week","timestamp":1634930212,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/575524983/","is_pending":"Not Pending","title":"Binary Tree Paths","memory":"40.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<String> binaryTreePaths(TreeNode root) {\n        List<String> paths = new ArrayList<>();\n        pathBuilder(root, paths, \"\");\n        return paths;\n    }\n    \n    private void pathBuilder(TreeNode root, List<String> paths, String path) {\n        if (root == null) return;\n        path = path + root.val;\n        if (root.left == null && root.right == null) {\n            paths.add(path);\n            return;\n        }\n        else {\n            pathBuilder(root.left, paths, path + \"->\");\n            pathBuilder(root.right, paths, path + \"->\");\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-paths"}