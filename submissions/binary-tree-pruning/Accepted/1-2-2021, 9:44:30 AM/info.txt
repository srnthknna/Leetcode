{"id":437597911,"lang":"java","time":"1 year, 1 month","timestamp":1609609470,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/437597911/","is_pending":"Not Pending","title":"Binary Tree Pruning","memory":"36.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode pruneTree(TreeNode root) {\n        if (root == null) return null;\n        \n        if (!containsOne(root)) {\n            return null;\n        }\n        \n        return root;\n    }\n    \n    private boolean containsOne(TreeNode root) {\n        if (root == null) return false;\n        \n        boolean left = containsOne(root.left);\n        boolean right = containsOne(root.right);\n        \n        if (!left) {\n            root.left = null;\n        }\n        \n        if (!right) {\n            root.right = null;\n        }\n        \n        return root.val == 1 || left || right;\n    }\n}","compare_result":"11111111111111111111111111111","title_slug":"binary-tree-pruning"}