{"id":437674775,"lang":"java","time":"1 year, 1 month","timestamp":1609622783,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/437674775/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"37.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        Queue<TreeNode> queue = new LinkedList<>();\n        if (root == null) return result;\n        queue.offer(root);\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode current = queue.poll();\n                if (i == 0) result.add(current.val);\n                if (current.right != null) queue.offer(current.right);\n                if (current.left != null) queue.offer(current.left);\n            }\n        }\n        return result;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view"}