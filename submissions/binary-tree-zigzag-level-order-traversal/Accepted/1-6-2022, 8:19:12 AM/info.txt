{"id":614331027,"lang":"java","time":"1 month, 3 weeks","timestamp":1641485952,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/614331027/","is_pending":"Not Pending","title":"Binary Tree Zigzag Level Order Traversal","memory":"39.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        if (root == null) return result;\n        \n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        LinkedList<Integer> level = new LinkedList<>();\n        boolean isLeft = true;\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode curr = queue.poll();\n                \n                if (isLeft) {\n                    level.addLast(curr.val);\n                } else {\n                    level.addFirst(curr.val);\n                }\n                \n                if (curr.left != null) {\n                    queue.offer(curr.left);\n                }\n                if (curr.right != null) {\n                    queue.offer(curr.right);\n                }\n            }\n                result.add(level);\n                level = new LinkedList<>();\n                isLeft = !isLeft;\n        }\n        return result;\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"binary-tree-zigzag-level-order-traversal"}