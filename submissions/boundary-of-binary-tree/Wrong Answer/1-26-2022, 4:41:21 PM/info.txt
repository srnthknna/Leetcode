{"id":628595924,"lang":"java","time":"1Â month","timestamp":1643244081,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/628595924/","is_pending":"Not Pending","title":"Boundary of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> boundaryOfBinaryTree(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        \n        if (root == null) return result;\n        result.add(root.val);\n        TreeNode cacheRoot = root;\n        \n        // Print Left;\n        printLeft(root.left, result);\n        \n        \n        // Print Leaf;\n        printLeaf(root, result);\n        \n        \n        // Print Right;\n        printRight(root.right, result);\n        \n        \n        return result;\n    }\n    \n    private void printRight(TreeNode root, List<Integer> result) {\n        if (root == null) return;\n        if (root.right != null) {\n            printRight(root.right, result);\n            result.add(root.val);\n        } else if (root.left != null) {\n            printRight(root.left, result);\n            result.add(root.val);\n        }\n    }\n    \n    private void printLeaf(TreeNode root, List<Integer> result) {\n        if (root == null) return;\n        printLeaf(root.left, result);\n        if (root.left == null && root.right == null) {\n            result.add(root.val);\n            return;\n        }\n        printLeaf(root.right, result);\n    }\n    \n    private void printLeft(TreeNode root, List<Integer> result) {\n        if (root == null) return;\n        if (root.left != null) {\n            result.add(root.val);\n            printLeft(root.left, result);\n        } else if (root.right != null) {\n            result.add(root.val);\n            printLeft(root.right, result);\n        }\n    }\n}","compare_result":"11101111111101111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111","title_slug":"boundary-of-binary-tree"}