{"id":645411078,"lang":"java","time":"1Â week","timestamp":1645378593,"status_display":"Accepted","runtime":"71 ms","url":"/submissions/detail/645411078/","is_pending":"Not Pending","title":"Campus Bikes","memory":"91.9 MB","code":"class Solution {\n    \n    // https://www.youtube.com/watch?v=Ej9R8SxP9c0&ab_channel=happygirlzt\n    public int[] assignBikes(int[][] workers, int[][] bikes) {\n        int n = workers.length, m = bikes.length;\n        int[] res = new int[n];\n        boolean[] assigned = new boolean[n];\n        boolean[] occupied = new boolean[m];\n        \n        List<int[]>[] distance = new List[2001];\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                int dist = calDist(workers[i], bikes[j]);\n                if (distance[dist] == null) {\n                    distance[dist] = new ArrayList<>();\n                }\n                distance[dist].add(new int[] {i, j});\n            }\n        }\n        \n        for (int i = 0; i < distance.length; i++) {\n            if (distance[i] == null) continue;\n            int size = distance[i].size();\n            for (int j = 0; j < size; j++) {\n                int w = distance[i].get(j)[0];\n                int b = distance[i].get(j)[1];\n                if (!assigned[w] && !occupied[b]) {\n                    res[w] = b;\n                    assigned[w] = true;\n                    occupied[b] = true;\n                }\n            }\n        }\n        return res;\n    }\n    \n    private int calDist(int[] worker, int[] bike) {\n        return Math.abs(worker[0] - bike[0]) + Math.abs(worker[1] - bike[1]);\n    }\n}","compare_result":"11111111111111111111111111111","title_slug":"campus-bikes"}