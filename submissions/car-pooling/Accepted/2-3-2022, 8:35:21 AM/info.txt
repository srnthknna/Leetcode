{"id":633773726,"lang":"java","time":"3 weeks, 3 days","timestamp":1643906121,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/633773726/","is_pending":"Not Pending","title":"Car Pooling","memory":"44.8 MB","code":"class Solution {\n    //https://www.youtube.com/watch?v=nO95uYKB-lo&list=PL-Jc9J83PIiE-TR27GB7V5TBLQRT5RnSl&index=74&ab_channel=Pepcoding\n    public boolean carPooling(int[][] trips, int capacity) {\n        int lastDrop = -1;\n        for (int[] trip : trips) {\n            lastDrop = Math.max(lastDrop, trip[2] + 1);\n        }\n        int[] highway = new int[lastDrop + 1];\n        \n        for (int[] trip: trips) {\n            highway[trip[1] + 1] += trip[0];\n            highway[trip[2] + 1] -= trip[0];\n        }\n        \n        for (int i = 1; i <= lastDrop; i++) {\n            highway[i] += highway[i - 1];\n            if (highway[i] > capacity) return false;\n        }\n        return true;\n    }\n    \n    // TreeMap can be used to store the same info and add the values in the map to check if they ever exceed the capacity of the car\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"car-pooling"}