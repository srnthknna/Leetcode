{"id":506168605,"lang":"java","time":"8 months, 3 weeks","timestamp":1623377180,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/506168605/","is_pending":"Not Pending","title":"Cheapest Flights Within K Stops","memory":"N/A","code":"class Solution {\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n        if (flights.length == 0) return -1;\n        \n        Map<Integer, List<int[]>> graph = buildGraph(flights); \n        \n        PriorityQueue<Node> pq = new PriorityQueue<Node>((a, b) -> (a.cost - b.cost));\n        \n        pq.add(new Node(src, 0, -1));\n        int[] minHops = new int[graph.size()];\n        Arrays.fill(minHops, -1);\n        \n        while (!pq.isEmpty()) {\n            Node cur = pq.poll();\n            \n            if (cur.dst == dst)\n                return cur.cost;\n            \n            if (cur.stop > k) continue;\n            if (minHops[cur.dst] != -1 && minHops[cur.dst] < cur.stop) continue;\n\n            List<int[]> next_hops = graph.getOrDefault(cur.dst, new ArrayList<>());\n\n            for (int[] next_hop : next_hops) {\n                pq.add(new Node(next_hop[0], cur.cost + next_hop[1], cur.stop + 1));\n            }\n\n        }\n        return -1;\n    }\n    \n    private Map<Integer, List<int[]>> buildGraph(int[][] flights) {\n        Map<Integer, List<int[]>> graph = new HashMap<>();\n        for (int[] flight : flights) {\n            graph.putIfAbsent(flight[0], new ArrayList<>());\n            graph.get(flight[0]).add(new int[]{flight[1], flight[2]});\n        }\n        return graph;\n    }\n    \n    class Node {\n        int dst;\n        int cost;\n        int stop;\n        \n        public Node(int dst, int cost, int stop) {\n            this.dst = dst;\n            this.cost = cost;\n            this.stop = stop;\n        }\n    }\n}","compare_result":"1011100000000000000000000000000000000000000000000","title_slug":"cheapest-flights-within-k-stops"}