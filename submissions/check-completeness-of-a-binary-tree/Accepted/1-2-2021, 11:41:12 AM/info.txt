{"id":437638044,"lang":"java","time":"1 year, 1 month","timestamp":1609616472,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/437638044/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"38.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCompleteTree(TreeNode root) {\n        boolean end = false;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        \n        while(!queue.isEmpty()) {\n            TreeNode current = queue.poll();\n            \n            if (current == null) {\n                end = true;\n            } else {\n                if (end) return false;\n                queue.offer(current.left);\n                queue.offer(current.right);\n            }\n        }\n        \n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree"}