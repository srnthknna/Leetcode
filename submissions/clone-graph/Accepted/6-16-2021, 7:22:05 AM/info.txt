{"id":508794051,"lang":"java","time":"8 months, 2 weeks","timestamp":1623853325,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/508794051/","is_pending":"Not Pending","title":"Clone Graph","memory":"39.3 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if (node == null) return node;\n        \n        Map<Node, Node> visited = new HashMap<>();\n        LinkedList<Node> queue = new LinkedList<>();\n        \n        visited.put(node, new Node(node.val));\n        queue.add(node);\n        \n        while (!queue.isEmpty()) {\n            Node cur = queue.remove();       \n            for (Node neighbor : cur.neighbors) {\n                if (!visited.containsKey(neighbor)) {\n                    visited.put(neighbor, (new Node(neighbor.val)));\n                    queue.add(neighbor);\n                }\n                visited.get(cur).neighbors.add(visited.get(neighbor));\n            }\n        }\n        \n        return visited.get(node);\n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph"}