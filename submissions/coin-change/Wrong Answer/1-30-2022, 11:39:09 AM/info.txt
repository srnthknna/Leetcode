{"id":631120983,"lang":"java","time":"4Â weeks","timestamp":1643571549,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/631120983/","is_pending":"Not Pending","title":"Coin Change","memory":"N/A","code":"class Solution {\n    public int coinChange(int[] coins, int amount) {\n        int n = coins.length;\n        int[][] dp = new int[n + 1][amount + 1];\n        for (int i = 0; i <= amount; i++)\n            dp[0][i] = Integer.MAX_VALUE;\n        for (int i = 0; i <= amount; i++)\n            if (i % coins[0] == 0)\n                dp[1][i] = i / coins[0];\n            else\n                dp[0][i] = Integer.MAX_VALUE;\n        for (int i = 2; i <= n; i++) {\n            for (int j = 1; j <= amount; j++) {\n                if (coins[i - 1] <= j) {\n                    dp[i][j] = Math.min(dp[i - 1][j], 1 + dp[i][j - coins[i - 1]]);\n                } else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        return amount != 0 && dp[n][amount] == 0 ? -1 : dp[n][amount];\n    }\n}","compare_result":"11111111111111111111111111111100000000000000100001000001000001000100010000000000000000000000000000000000100000001100000000000000000000000000000000000000000000000000000010000000000000011011","title_slug":"coin-change"}