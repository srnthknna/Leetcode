{"id":495588103,"lang":"java","time":"9 months, 1 week","timestamp":1621477523,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/495588103/","is_pending":"Not Pending","title":"Combination Sum II","memory":"39.6 MB","code":"class Solution {\n    \n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        List<List<Integer>> output = new ArrayList<>();\n        Arrays.sort(candidates);\n        backtrack(output, candidates, new ArrayList<>(), target, 0);\n        return output;\n    }\n    \n    private void backtrack(List<List<Integer>> output, int[] candidates, List<Integer> temp, int remain, int start) {\n        if (remain < 0) return;\n        else if (remain == 0) output.add(new ArrayList<>(temp));\n        else {\n            for (int i = start; i < candidates.length; i++) {\n                if(i > start && candidates[i] == candidates[i-1]) continue; // skip duplicates\n                temp.add(candidates[i]);\n                backtrack(output, candidates, temp, remain - candidates[i], i + 1);\n                temp.remove(temp.size() - 1);\n            }\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii"}