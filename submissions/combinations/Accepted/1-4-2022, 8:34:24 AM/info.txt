{"id":612971091,"lang":"java","time":"1 month, 3 weeks","timestamp":1641314064,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/612971091/","is_pending":"Not Pending","title":"Combinations","memory":"42.1 MB","code":"class Solution {\n    List<List<Integer>> output = new ArrayList<>();\n    public List<List<Integer>> combine(int n, int k) {\n        backtract(n, k, 1, new LinkedList<Integer>());\n        return output;\n    }\n    private void backtract(int n , int k, int first, LinkedList<Integer> curr) {\n        if (curr.size() == k) {\n            output.add(new LinkedList(curr));\n        }\n        \n        for (int i = first; i < n + 1; i++) {\n            curr.add(i);\n            backtract(n , k, i + 1, curr);\n            curr.removeLast();\n        }\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"combinations"}