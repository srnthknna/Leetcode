{"id":584022594,"lang":"java","time":"3 months, 3 weeks","timestamp":1636388023,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/584022594/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"37.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int index;\n    public TreeNode bstFromPreorder(int[] preorder) {\n        return helper(preorder, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    }\n    \n    private TreeNode helper(int[] preorder, int lower, int upper) {\n        if (index > preorder.length - 1) return null;\n        \n        int val = preorder[index];\n        \n        if (val < lower || val > upper) return null;\n        \n        index++;\n        TreeNode root = new TreeNode(val);\n        root.left = helper(preorder, lower, val);\n        root.right = helper(preorder, val, upper);\n        return root;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal"}