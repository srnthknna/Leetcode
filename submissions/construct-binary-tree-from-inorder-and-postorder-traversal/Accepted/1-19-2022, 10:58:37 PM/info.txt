{"id":623782520,"lang":"java","time":"1 month, 1 week","timestamp":1642661917,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/623782520/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"39 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int postIndx;\n    Map<Integer, Integer> inorderMap;\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        postIndx = postorder.length - 1;\n        inorderMap = new HashMap<>();\n        for (int i = 0; i < inorder.length; i++)\n            inorderMap.put(inorder[i], i);\n        return buildTreeFromArray(postorder, 0, postorder.length - 1);\n    }\n    \n    private TreeNode buildTreeFromArray(int[] postorder, int left, int right) {\n        if (left > right) return null;\n        \n        int rootVal = postorder[postIndx--];\n        TreeNode root = new TreeNode(rootVal);\n        \n        root.right = buildTreeFromArray(postorder, inorderMap.get(rootVal) + 1, right);\n        root.left = buildTreeFromArray(postorder, left, inorderMap.get(rootVal) - 1);\n        return root;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal"}