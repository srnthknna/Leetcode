{"id":624025581,"lang":"java","time":"1 month, 1 week","timestamp":1642694465,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/624025581/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Postorder Traversal","memory":"40.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int preIndx = 0, postIndx = 0;\n    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {\n        TreeNode root = new TreeNode(preorder[preIndx++]);\n        if (root.val != postorder[postIndx]) {\n            root.left = constructFromPrePost(preorder, postorder);\n        }\n        if (root.val != postorder[postIndx]) {\n            root.right = constructFromPrePost(preorder, postorder);\n        }\n        postIndx++;\n        return root;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-postorder-traversal"}