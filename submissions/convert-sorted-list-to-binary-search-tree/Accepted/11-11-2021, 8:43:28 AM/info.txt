{"id":585596147,"lang":"java","time":"3 months, 2 weeks","timestamp":1636649008,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/585596147/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"40.1 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        List<Integer> arr = new ArrayList<>();\n        while (head != null) {\n            arr.add(head.val);\n            head = head.next;\n        }\n        return helper(arr, 0, arr.size() - 1);\n    }\n    \n    private TreeNode helper(List<Integer> arr, int start, int end) {\n        if (arr.isEmpty() || start > end) return null;\n        int mid = (start + end) / 2;\n        \n        TreeNode root = new TreeNode(arr.get(mid));\n        root.left = helper(arr, start, mid - 1);\n        root.right = helper(arr, mid + 1, end);\n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree"}