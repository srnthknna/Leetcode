{"id":645392662,"lang":"java","time":"1Â week","timestamp":1645376643,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/645392662/","is_pending":"Not Pending","title":"Copy List with Random Pointer","memory":"45.3 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    int val;\n    Node next;\n    Node random;\n\n    public Node(int val) {\n        this.val = val;\n        this.next = null;\n        this.random = null;\n    }\n}\n*/\n\nclass Solution1 {\n    Map<Node, Node> cloneMap = new HashMap<>();\n    \n    private Node createClone(Node oldNode) {\n        if (oldNode == null) return null;\n        \n        if (cloneMap.containsKey(oldNode)) {\n            return cloneMap.get(oldNode);\n        }\n        Node newNode = new Node(oldNode.val, null, null);\n        cloneMap.put(oldNode, newNode);\n        return newNode;\n    }\n    \n    public Node copyRandomList(Node head) {\n        if (head == null) return null;\n        \n        Node oldNode = head;\n        Node newNode = new Node(head.val);\n        cloneMap.put(oldNode, newNode);\n        \n        while (oldNode != null) {\n            newNode.next = createClone(oldNode.next);\n            newNode.random = createClone(oldNode.random);\n            oldNode = oldNode.next;\n            newNode = newNode.next;\n        }\n        return cloneMap.get(head);\n    }\n}\n\nclass Solution {\n    \n    public Node copyRandomList(Node head) {\n        if (head == null) return null;\n        \n        Node ptr = head;\n        \n        // A->A`->B->B`\n        while (ptr != null) {\n            Node node = new Node(ptr.val);\n            node.next = ptr.next;\n            ptr.next = node;\n            ptr = node.next;\n        }\n        \n        ptr = head;\n        \n        while (ptr != null) {\n            ptr.next.random = ptr.random != null ? ptr.random.next : null;\n            ptr = ptr.next.next;\n        }\n        \n        Node oldHead = head;\n        Node newHead = head.next, returnHead = newHead;\n        \n        while (oldHead != null) {\n            oldHead.next = oldHead.next.next;\n            newHead.next = (newHead.next != null) ? newHead.next.next : null;\n            oldHead = oldHead.next;\n            newHead = newHead.next;\n        }\n        \n        return returnHead;   \n    }\n}","compare_result":"1111111111111111111","title_slug":"copy-list-with-random-pointer"}