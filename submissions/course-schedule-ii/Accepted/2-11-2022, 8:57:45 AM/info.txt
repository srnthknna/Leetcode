{"id":639370428,"lang":"java","time":"2 weeks, 2 days","timestamp":1644598665,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/639370428/","is_pending":"Not Pending","title":"Course Schedule II","memory":"43.5 MB","code":"class Solution {\n    private static final int NOT_VISITED = 0;\n    private static final int VISITING = 1;\n    private static final int VISITED = 2;\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        List<Integer>[] adj = new ArrayList[numCourses];\n        \n        for (int i = 0; i < numCourses; i++)\n            adj[i] = new ArrayList<Integer>();\n        \n        for (int[] pre : prerequisites)\n            adj[pre[0]].add(pre[1]);\n        \n        int[] visited = new int[numCourses];\n        int[] ans = new int[numCourses];\n        List<Integer> answer = new ArrayList<>();\n        \n        for (int i = 0; i < numCourses; i++)\n            if (visited[i] == NOT_VISITED && !dfs(adj, visited, i, answer)) return new int[0];\n\n        for (int i = 0; i < answer.size(); i++)\n            ans[i] = answer.get(i);\n        return ans;\n    }\n    \n    private boolean dfs(List<Integer>[] adj, int[] visited, int v, List<Integer> answer) {\n        if (visited[v] == VISITING) return false;\n        if(visited[v] == VISITED) return true;\n        visited[v] = VISITING;\n        for (int ad : adj[v]) \n            if (!dfs(adj, visited, ad, answer)) return false;\n        visited[v] = VISITED;\n        answer.add(v);\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"course-schedule-ii"}