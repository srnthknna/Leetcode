{"id":441253090,"lang":"java","time":"1 year, 1 month","timestamp":1610307551,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/441253090/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"39.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int deepestLeavesSum(TreeNode root) {\n        List<TreeNode> cur = new ArrayList<>(), next;\n\n        if (root == null) return 0;\n        cur.add(root);\n        \n        while (!cur.isEmpty()) {\n            next = new ArrayList<>();\n            int sum = 0;\n            for (TreeNode node : cur) {\n                sum += node.val;\n                if (node.left != null) next.add(node.left);\n                if (node.right != null) next.add(node.right);\n            }\n            \n            if (next.isEmpty()) {\n                return sum;\n            }\n            cur = next;\n        }\n        \n        return 0;\n    }\n}","compare_result":"111111111111111","title_slug":"deepest-leaves-sum"}