{"id":482407333,"lang":"java","time":"10 months, 2 weeks","timestamp":1618794303,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/482407333/","is_pending":"Not Pending","title":"Degree of an Array","memory":"43.1 MB","code":"class Solution {\n    public int findShortestSubArray(int[] nums) {\n        Map<Integer, Integer> nums_map = new HashMap<>();\n        int degree = 0;\n        Map<Integer, Integer> first_seen = new HashMap<>();\n        int minLength = 0;\n        \n        for (int i = 0; i < nums.length; i++) {\n            first_seen.putIfAbsent(nums[i], i);\n            nums_map.put(nums[i], nums_map.getOrDefault(nums[i], 0) + 1);\n            if (nums_map.get(nums[i]) > degree) {\n                degree = nums_map.get(nums[i]);\n                minLength = i - first_seen.get(nums[i]) + 1;\n            } else if (degree == nums_map.get(nums[i])) {\n                minLength = Math.min(minLength, i - first_seen.get(nums[i]) + 1);\n            }\n        }\n        return minLength;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"degree-of-an-array"}