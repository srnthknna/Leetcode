{"id":585605307,"lang":"java","time":"3 months, 2 weeks","timestamp":1636650393,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/585605307/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"39.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private int successor(TreeNode root) {\n        root = root.right;\n        while(root.left != null) root = root.left;\n        return root.val;\n    }\n    private int predecessor(TreeNode root) {\n        root = root.left;\n        while(root.right != null) root = root.right;\n        return root.val;\n    }\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if (root == null) return null;\n        \n        if (root.val < key) root.right = deleteNode(root.right, key);\n        else if (root.val > key) root.left = deleteNode(root.left, key);\n        else {\n            if (root.left == null && root.right == null) {\n                root = null;\n            } else if (root.right != null) {\n                root.val = successor(root);\n                root.right = deleteNode(root.right, root.val);\n            } else {\n                root.val = predecessor(root);\n                root.left = deleteNode(root.left, root.val);\n            }\n        }\n        return root;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst"}