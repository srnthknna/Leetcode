{"id":633299957,"lang":"java","time":"3 weeks, 4 days","timestamp":1643848543,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/633299957/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"43 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    // https://www.youtube.com/watch?v=BmpXMtA0oF8\n    \n    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {\n        Set<Integer> set = new HashSet<>();\n        \n        for (int to_del : to_delete) {\n            set.add(to_del);\n        }\n        \n        List<TreeNode> ans = new ArrayList<>();\n        helper(root, set, ans);\n        \n        if (!set.contains(root.val)) {\n            ans.add(root);\n        }\n        \n        return ans;\n    }\n    \n    private TreeNode helper(TreeNode root, Set<Integer> set, List<TreeNode> ans) {\n        if (root == null) return root;\n        root.left = helper(root.left, set, ans);\n        root.right = helper(root.right, set, ans);\n        \n        if (set.contains(root.val)) {\n            if (root.left != null) {\n                ans.add(root.left);\n            }\n            if (root.right != null) {\n                ans.add(root.right);\n            }\n            return null;\n        }\n        \n        return root;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-nodes-and-return-forest"}