{"id":634443210,"lang":"java","time":"3 weeks, 2 days","timestamp":1643991510,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/634443210/","is_pending":"Not Pending","title":"Delete the Middle Node of a Linked List","memory":"63 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteMiddle(ListNode head) {\n        ListNode headC = head;\n        int len = 0;\n        while (headC != null) {\n            headC = headC.next;\n            len++;\n        }\n        \n        if (len == 0 || len == 1)\n            return null;\n        else if (len == 2) {\n            head.next = null;\n            return head;\n        }\n        \n        int mid = len / 2;\n        headC = head;\n        \n        for (int i = 0; i < mid; i++) {\n            headC = headC.next;\n        }\n        \n        delete(headC);\n        \n        return head;\n    }\n    \n    private void delete(ListNode node) {\n        node.val = node.next.val;\n        node.next = node.next.next;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-the-middle-node-of-a-linked-list"}