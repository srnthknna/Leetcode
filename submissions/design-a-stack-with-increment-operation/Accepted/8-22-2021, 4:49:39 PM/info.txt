{"id":542627542,"lang":"java","time":"6 months, 1 week","timestamp":1629676179,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/542627542/","is_pending":"Not Pending","title":"Design a Stack With Increment Operation","memory":"39.4 MB","code":"class CustomStack {\n    \n    int[] arr;\n    int top;\n\n    public CustomStack(int maxSize) {\n        arr = new int[maxSize];\n        top = -1;\n    }\n    \n    public void push(int x) {\n        if (!isFull())\n            arr[++top] = x;\n    }\n    \n    public int pop() {\n        return isEmpty() ? -1 : arr[top--];\n    }\n    \n    public void increment(int k, int val) {\n        for (int i = 0; i < k && i < arr.length; i++)\n            arr[i] += val;\n    }\n    \n    private boolean isFull() {\n        return top == arr.length - 1;\n    }\n    \n    private boolean isEmpty() {\n        return top == -1;\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */","compare_result":"1111111111111111111111111111111111","title_slug":"design-a-stack-with-increment-operation"}