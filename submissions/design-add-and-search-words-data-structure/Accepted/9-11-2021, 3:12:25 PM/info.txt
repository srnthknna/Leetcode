{"id":553304541,"lang":"java","time":"5 months, 2 weeks","timestamp":1631398345,"status_display":"Accepted","runtime":"94 ms","url":"/submissions/detail/553304541/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"87.9 MB","code":"class WordDictionary {\n    class TrieNode {\n        Map<Character, TrieNode> childs;\n        boolean isEnd;\n        \n        public TrieNode() {\n            childs = new HashMap<>();\n            isEnd = false;\n        }\n    }\n    \n    private TrieNode root;\n    \n    /** Initialize your data structure here. */\n    public WordDictionary() {\n        root = new TrieNode();    \n    }\n    \n    public void addWord(String word) {\n        TrieNode current = root;\n        for (char ch : word.toCharArray()) {\n            TrieNode node = current.childs.get(ch);\n            if (node == null) {\n                node = new TrieNode();\n                current.childs.put(ch, node);\n            }\n            current = node;\n        }\n        current.isEnd = true;\n    }\n    \n    public boolean search(String word) {\n        return search(root, word);\n    }\n    \n    private boolean search(TrieNode root, String word) {\n        TrieNode current = root;\n        for (int i = 0; i < word.length(); i++) {\n            char ch = word.charAt(i);\n            \n            TrieNode node = current.childs.get(ch);\n            if (node == null) {\n                if (ch == '.') {\n                    for (TrieNode possibility : current.childs.values())\n                    if (search(possibility, word.substring(i+1, word.length())))\n                        return true;\n                }\n                return false;\n            } else\n                current = node;\n        }\n        return current.isEnd;\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure"}