{"id":471915247,"lang":"java","time":"11 months, 1 week","timestamp":1616602875,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/471915247/","is_pending":"Not Pending","title":"Design an Expression Tree With Evaluate Function","memory":"36.7 MB","code":"/**\n * This is the interface for the expression tree Node.\n * You should not remove it, and you can define some classes to implement it.\n */\n\nabstract class Node {\n    public abstract int evaluate();\n    // define your fields here\n};\n\n\n/**\n * This is the TreeBuilder class.\n * You can treat it as the driver code that takes the postinfix input \n * and returns the expression tree represnting it as a Node.\n */\n\nclass TreeBuilder {\n    Node buildTree(String[] postfix) {\n        Stack<Integer> stack = new Stack<>();\n        for(String i: postfix) {\n            if(i.equals(\"+\")) stack.push(stack.pop() + stack.pop());\n            else if(i.equals(\"-\")) {\n                stack.push( - stack.pop() + stack.pop());\n            } else if(i.equals(\"*\")) stack.push(stack.pop() * stack.pop());\n            else if(i.equals(\"/\")) {\n                int previous = stack.pop();\n                stack.push(stack.pop() / previous);\n            } else stack.push(Integer.parseInt(i));\n        }\n        return new Node() {\n            public int evaluate() {\n                return stack.pop();\n            }\n        };\n    }\n};\n\n\n/**\n * Your TreeBuilder object will be instantiated and called as such:\n * TreeBuilder obj = new TreeBuilder();\n * Node expTree = obj.buildTree(postfix);\n * int ans = expTree.evaluate();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"design-an-expression-tree-with-evaluate-function"}