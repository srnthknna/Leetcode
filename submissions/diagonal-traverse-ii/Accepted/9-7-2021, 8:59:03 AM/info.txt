{"id":551006880,"lang":"java","time":"5 months, 3 weeks","timestamp":1631030343,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/551006880/","is_pending":"Not Pending","title":"Diagonal Traverse II","memory":"64.7 MB","code":"class Solution {\n    public int[] findDiagonalOrder(List<List<Integer>> nums) {\n        int i = 0, n = 0, maxKey = 0;\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        \n        for (int r = nums.size() - 1; r >= 0; r--)\n            for (int c = 0; c < nums.get(r).size(); c++) {\n                map.putIfAbsent(r + c , new ArrayList<>());\n                map.get(r + c).add(nums.get(r).get(c));\n                maxKey = Math.max(maxKey, r + c);\n                n++;\n            }\n        int[] ans = new int[n];\n        for (int k = 0; k <= maxKey; k++) {\n            List<Integer> value = map.get(k);\n            if (value == null) continue;\n            for (int v : value)\n                ans[i++] = v;\n        }\n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"diagonal-traverse-ii"}