{"id":615780016,"lang":"java","time":"1 month, 2 weeks","timestamp":1641675593,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/615780016/","is_pending":"Not Pending","title":"Distant Barcodes","memory":"41.9 MB","code":"class Solution {\n    public int[] rearrangeBarcodes(int[] barcodes) {\n        Map<Integer, Integer> map = new HashMap<>();\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> map.get(b) - map.get(a));\n        \n        for (int code : barcodes) {\n            map.put(code, map.getOrDefault(code, 0) + 1);\n        }\n        pq.addAll(map.keySet());\n        \n        int[] result = new int[barcodes.length];\n        int index = 0;\n        while (!pq.isEmpty()) {\n            int a = pq.poll();\n            result[index++] = a;\n            \n            if (!pq.isEmpty()) {\n                int b = pq.poll();\n                result[index++] = b;\n                update(map, pq, a);\n                update(map, pq, b);\n            }\n        }\n        \n        return result;\n    }\n    \n    private void update(Map<Integer, Integer> map, PriorityQueue<Integer> pq, int val) {\n        int freq = map.get(val);\n        if (freq == 1) {\n            map.remove(val);\n        } else {\n            map.put(val, freq - 1);\n            pq.offer(val);\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"distant-barcodes"}