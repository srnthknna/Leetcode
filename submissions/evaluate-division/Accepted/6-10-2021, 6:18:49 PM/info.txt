{"id":506156423,"lang":"java","time":"8 months, 3 weeks","timestamp":1623374329,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/506156423/","is_pending":"Not Pending","title":"Evaluate Division","memory":"38.2 MB","code":"class Solution {\n    \n    class Equation {\n        String denom;\n        double val;\n        \n        public Equation(String denom, double val) {\n            this.denom = denom;\n            this.val = val;\n        }\n    }\n    \n    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {\n        Map<String, List<Equation>> graph = buildGraph(equations, values);\n        \n        double[] result = new double[queries.size()];\n        \n        for (int i = 0; i < queries.size(); i++)\n            result[i] = dfs(queries.get(i).get(0), queries.get(i).get(1), new HashSet<>(), graph);\n        \n        return result;\n    }\n    \n    private double dfs(String num, String denom, Set<String> visited, Map<String, List<Equation>> graph) {\n        if (!graph.containsKey(num) || !graph.containsKey(denom)) \n            return -1.0;\n        if (num.equals(denom)) \n            return 1.0;\n        visited.add(num);\n        \n        for (Equation eq : graph.get(num)) {\n            if (!visited.contains(eq.denom)) {\n                double ans = dfs(eq.denom, denom, visited, graph);\n                if (ans != -1.0)\n                    return ans * eq.val;\n            }\n        }\n        return -1.0;\n    }\n    \n    private Map<String, List<Equation>> buildGraph(List<List<String>> equations, double[] values) {\n        Map<String, List<Equation>> graph = new HashMap<>();\n        for (int i = 0; i < values.length; i++) {\n            String num = equations.get(i).get(0);\n            String denom = equations.get(i).get(1);\n            \n            graph.putIfAbsent(num, new ArrayList<>());\n            graph.putIfAbsent(denom, new ArrayList<>());\n            \n            graph.get(num).add(new Equation(denom, values[i]));\n            graph.get(denom).add(new Equation(num, 1 / values[i]));\n        }\n        return graph;\n    }\n}","compare_result":"11111111111111111111111","title_slug":"evaluate-division"}