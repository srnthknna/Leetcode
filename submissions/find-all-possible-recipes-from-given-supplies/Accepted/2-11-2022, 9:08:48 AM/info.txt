{"id":639376502,"lang":"java","time":"2 weeks, 2 days","timestamp":1644599328,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/639376502/","is_pending":"Not Pending","title":"Find All Possible Recipes from Given Supplies","memory":"72.1 MB","code":"class Solution {\n    // very similar to https://leetcode.com/problems/course-schedule/\n    \n    private static int NOT_VISITED = 0;\n    private static int VISITING = 1;\n    private static int VISITED = 2;\n    public List<String> findAllRecipes(String[] recipes, List<List<String>> ingredients, String[] supplies) {\n        Map<String, Integer> visited = new HashMap<>();\n        for (String supply : supplies)\n            visited.put(supply, VISITED);\n        \n        Map<String, List<String>> adj = new HashMap<>();\n        for (int i = 0; i < recipes.length; i++) {\n            visited.put(recipes[i], NOT_VISITED);\n            adj.put(recipes[i], ingredients.get(i));\n        }\n        \n        List<String> output = new ArrayList<>();\n        for (String recipe : recipes) {\n            dfs(recipe, adj, visited, output);\n        }\n        \n        return output;\n    }\n    \n    private boolean dfs(String recipe, Map<String, List<String>> adj, Map<String, Integer> visited, List<String> output) {\n        if (!visited.containsKey(recipe)) return false;\n        if (visited.get(recipe) == VISITING) return false;\n        if (visited.get(recipe) == VISITED) return true;\n        \n        visited.put(recipe, VISITING);\n        for (String ingridient : adj.get(recipe)) {\n            if (!dfs(ingridient, adj, visited, output)) return false;\n        }\n        visited.put(recipe, VISITED);\n        output.add(recipe);\n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-possible-recipes-from-given-supplies"}