{"id":436281367,"lang":"java","time":"1 year, 1 month","timestamp":1609305430,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/436281367/","is_pending":"Not Pending","title":"Find All The Lonely Nodes","memory":"39.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> getLonelyNodes(TreeNode root) {\n        List<Integer> onlyC = new ArrayList<>();\n        dfs(root, onlyC);\n        return onlyC;\n    }\n    \n    private void dfs(TreeNode root, List<Integer> onlyC) {\n        if (root == null) return;\n        if (root.left != null && root.right == null) onlyC.add(root.left.val);\n        if (root.left == null && root.right !=  null) onlyC.add(root.right.val);\n        dfs(root.left, onlyC);\n        dfs(root.right, onlyC);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-the-lonely-nodes"}