{"id":437622600,"lang":"java","time":"1 year, 1 month","timestamp":1609613872,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/437622600/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"38.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int findBottomLeftValue(TreeNode root) {\n        Queue<TreeNode> queue = new LinkedList<>();\n        \n        queue.offer(root);\n        \n        while (!queue.isEmpty()) {\n            root = queue.poll();\n            \n            if (root.right != null) queue.offer(root.right);\n            if (root.left != null) queue.offer(root.left);\n        }\n        \n        return root.val;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-bottom-left-tree-value"}