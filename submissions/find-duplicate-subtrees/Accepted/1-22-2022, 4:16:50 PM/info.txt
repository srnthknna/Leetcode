{"id":625625776,"lang":"java","time":"1Â month","timestamp":1642897010,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/625625776/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"44.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\n        List<TreeNode> nodes = new ArrayList<>();\n        Map<String, Integer> serial = new HashMap<>();\n        serialize(root, nodes, serial);\n        return nodes;\n    }\n    \n    private String serialize(TreeNode root, List<TreeNode> nodes, Map<String, Integer> serial) {\n        if (root == null) return \"\";\n        \n        String curr = root.val + \",\" + serialize(root.left, nodes, serial) + \",\" + serialize(root.right, nodes, serial);\n        \n        serial.put(curr, serial.getOrDefault(curr, 0) + 1);\n        if (serial.get(curr) == 2) {\n            nodes.add(root);\n        }\n        return curr;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees"}