{"id":640059271,"lang":"java","time":"2 weeks, 1 day","timestamp":1644696937,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/640059271/","is_pending":"Not Pending","title":"Find K Pairs with Smallest Sums","memory":"125.2 MB","code":"class Solution {\n    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {\n        \n\t\t//In the minHeap array, 0th element refers to the curr element in nums1 and 1st element refers to curr element in nums2 \n        PriorityQueue<List<Integer>> minHeap = new PriorityQueue<>((a,b) -> (a.get(0) + a.get(1) - (b.get(0) + b.get(1))));\n        \n\t\t// The 2nd element in the minHeap is the index of nums2, the corresponding element of nums2 is in index1 of minHeap\n        for(int i=0; i < nums1.length && i < k; i++)\n            minHeap.add(Arrays.asList(nums1[i], nums2[0], 0));\n        \n        List<List<Integer>> result = new ArrayList<>();\n        \n        for(int i=0; i < k && !minHeap.isEmpty(); i++){\n            List<Integer> curr = minHeap.poll();\n            result.add(Arrays.asList(curr.get(0), curr.get(1)));\n            int nums2Idx = curr.get(2);\n            if(nums2Idx < nums2.length - 1)\n                minHeap.add(Arrays.asList(curr.get(0), nums2[nums2Idx + 1], nums2Idx + 1));\n        }\n        return result;\n    }\n}","compare_result":"11111111111111111111111111111111111","title_slug":"find-k-pairs-with-smallest-sums"}