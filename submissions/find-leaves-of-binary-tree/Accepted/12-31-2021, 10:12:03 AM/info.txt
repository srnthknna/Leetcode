{"id":610467704,"lang":"java","time":"1 month, 4 weeks","timestamp":1640974323,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/610467704/","is_pending":"Not Pending","title":"Find Leaves of Binary Tree","memory":"37.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<List<Integer>> result;\n    public List<List<Integer>> findLeaves(TreeNode root) {\n        result = new ArrayList<>();\n        while (root != null) {\n            List<Integer> curr = new ArrayList<>();\n            root = helper(root, curr);\n            result.add(curr);\n        }\n        return result;\n    }\n    \n    private TreeNode helper(TreeNode root, List<Integer> curr) {\n        if (root != null) {\n            if (root.left == null && root.right == null) {\n                curr.add(root.val);\n                return null;\n            } else {\n                root.left = helper(root.left, curr);\n                root.right = helper(root.right, curr);\n            }\n        }\n        return root;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-leaves-of-binary-tree"}