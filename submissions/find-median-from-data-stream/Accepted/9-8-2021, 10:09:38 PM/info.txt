{"id":551891267,"lang":"java","time":"5 months, 3 weeks","timestamp":1631164178,"status_display":"Accepted","runtime":"372 ms","url":"/submissions/detail/551891267/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"130.6 MB","code":"class MedianFinder {\n    \n    Queue<Integer> minHeap;\n    Queue<Integer> maxHeap;\n    \n    /** initialize your data structure here. */\n    public MedianFinder() {\n        minHeap = new PriorityQueue<>();\n        maxHeap = new PriorityQueue<>(Comparator.reverseOrder());\n    }\n    \n    public void addNum(int num) {\n            maxHeap.offer(num);\n            if (maxHeap.size() > minHeap.size())\n                minHeap.offer(maxHeap.poll());\n         \n            minHeap.offer(num);\n            if (minHeap.size() > maxHeap.size())\n                maxHeap.offer(minHeap.poll());\n        \n    }\n    \n    public double findMedian() {\n        if (minHeap.size() > maxHeap.size())\n            return minHeap.peek();\n        else if (maxHeap.size() > minHeap.size())\n            return maxHeap.peek();\n        else\n            return (maxHeap.peek() + minHeap.peek()) * 0.5;\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream"}