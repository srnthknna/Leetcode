{"id":502140032,"lang":"java","time":"8 months, 4 weeks","timestamp":1622681253,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/502140032/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"44.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    Map<Integer, Integer> map;\n    int max = Integer.MIN_VALUE;\n    public int[] findMode(TreeNode root) {\n        map = new HashMap<>();\n        if (root == null) return new int[0];\n        \n        inorder(root);\n        \n        List<Integer> keys = map.keySet().stream().filter(k -> max == map.get(k)).collect(Collectors.toList());\n        System.out.println(keys);\n        int[] result = new int[keys.size()];\n\n        for (int i = 0; i < keys.size(); i++)\n            result[i] = keys.get(i);\n        return result;\n        \n    }\n    \n    private void inorder(TreeNode root) {\n        if (root == null) return;\n        inorder(root.left);\n        map.put(root.val, map.getOrDefault(root.val, 0) + 1);\n        max = Math.max(max, map.get(root.val));\n        inorder(root.right);\n    }\n}","compare_result":"1111111111111111111111","title_slug":"find-mode-in-binary-search-tree"}