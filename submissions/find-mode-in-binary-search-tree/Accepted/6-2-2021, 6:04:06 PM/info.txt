{"id":502144752,"lang":"java","time":"8 months, 4 weeks","timestamp":1622682246,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/502144752/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"42.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution1 {\n    Map<Integer, Integer> map;\n    int max = Integer.MIN_VALUE;\n    public int[] findMode(TreeNode root) {\n        map = new HashMap<>();\n        if (root == null) return new int[0];\n        \n        inorder(root);\n        \n        List<Integer> keys = new ArrayList<>();\n        for (int key : map.keySet()) {\n            if (map.get(key) == max) {\n                keys.add(key);\n            }\n        }\n        \n        int[] result = new int[keys.size()];\n\n        for (int i = 0; i < keys.size(); i++) {\n            result[i] = keys.get(i);\n        }\n        return result;\n        \n    }\n    \n    private void inorder(TreeNode root) {\n        if (root == null) return;\n        inorder(root.left);\n        map.put(root.val, map.getOrDefault(root.val, 0) + 1);\n        max = Math.max(max, map.get(root.val));\n        inorder(root.right);\n    }\n}\n\nclass Solution {\n    Integer prev = null;\n    int count = 1;\n    int max = Integer.MIN_VALUE;\n    public int[] findMode(TreeNode root) {\n        if (root == null) return new int[0];\n        \n        List<Integer> list = new ArrayList<>();\n        traverse(root, list);\n        \n        int[] result = new int[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n            result[i] = list.get(i);\n        }\n        return result;\n        \n    }\n    \n    private void traverse(TreeNode root, List<Integer> list) {\n        if (root == null) return;\n        traverse(root.left, list);\n        if (prev != null) {\n            if (prev == root.val) {\n                count++;\n            } else {\n                count = 1;\n            }\n        }\n        if (count > max) {\n            max = count;\n            list.clear();\n            list.add(root.val);\n        } else if (count == max) {\n            list.add(root.val);\n        }\n        prev = root.val;\n        traverse(root.right, list);\n    }\n}","compare_result":"1111111111111111111111","title_slug":"find-mode-in-binary-search-tree"}