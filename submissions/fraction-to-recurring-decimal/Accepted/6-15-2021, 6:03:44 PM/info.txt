{"id":508527799,"lang":"java","time":"8 months, 2 weeks","timestamp":1623805424,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/508527799/","is_pending":"Not Pending","title":"Fraction to Recurring Decimal","memory":"36.5 MB","code":"class Solution {\n    public String fractionToDecimal(int numerator, int denominator) {\n        if (numerator == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        \n        if (numerator < 0 ^ denominator < 0) {\n            sb.append(\"-\");\n        }\n        \n        long dividend = Math.abs(Long.valueOf(numerator));\n        long divisor = Math.abs(Long.valueOf(denominator));\n        \n        sb.append(String.valueOf(dividend / divisor));\n        long remainder = dividend % divisor;\n        \n        if (remainder == 0) \n            return sb.toString();\n        \n        sb.append(\".\");\n        \n        Map<Long, Integer> map = new HashMap<>();\n        while (remainder != 0) {\n            if (map.containsKey(remainder)) {\n                sb.insert(map.get(remainder), \"(\");\n                sb.append(\")\");\n                break;\n            }\n            map.put(remainder, sb.length());\n            remainder *= 10;\n            sb.append(String.valueOf(remainder / divisor));\n            remainder %= divisor;\n        }\n        return sb.toString();\n    }\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"fraction-to-recurring-decimal"}