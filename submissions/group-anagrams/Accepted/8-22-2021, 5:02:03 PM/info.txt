{"id":542631621,"lang":"java","time":"6 months, 1 week","timestamp":1629676923,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/542631621/","is_pending":"Not Pending","title":"Group Anagrams","memory":"42.3 MB","code":"class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        if (strs.length == 0) return new ArrayList<>();\n        Map<String, List> map = new HashMap<String, List>();\n        \n        int[] count = new int[26];\n        \n        for (String s : strs) {\n            Arrays.fill(count, 0);\n            \n            for (char c : s.toCharArray()) {\n                count[c - 'a']++;\n            }\n            \n            StringBuilder sb = new StringBuilder();\n            for (int i : count) {\n                sb.append(\"#\");\n                sb.append(i);\n            }\n            \n            String key = sb.toString();\n            \n            if (!map.containsKey(key)) map.put(key, new ArrayList());\n            map.get(key).add(s);\n        }\n        \n        return new ArrayList(map.values());\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams"}