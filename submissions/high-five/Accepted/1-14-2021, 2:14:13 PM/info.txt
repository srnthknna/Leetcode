{"id":443038402,"lang":"java","time":"1 year, 1 month","timestamp":1610662453,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/443038402/","is_pending":"Not Pending","title":"High Five","memory":"39.3 MB","code":"class Solution {\n    public int[][] highFive(int[][] items) {\n        Map<Integer, Queue<Integer>> scores = new TreeMap<>();\n        \n        for (int[] item : items) {\n            if (!scores.containsKey(item[0])) {\n                scores.put(item[0], new PriorityQueue<Integer>());\n            }\n            scores.get(item[0]).add(item[1]);\n        }\n        \n        int[][] result = new int[scores.size()][2];\n        int index = 0;\n        for (int id : scores.keySet()) {\n            int sum = 0;\n            Queue<Integer> cur = scores.get(id);\n            while (cur.size() > 5) {\n                cur.poll();\n            }\n            for (int i : cur) {\n                sum += i;\n            }\n            result[index][0] = id;\n            result[index][1] = sum / 5;\n            index++;\n        }\n        return result;\n    }\n}","compare_result":"111111111111111111111111","title_slug":"high-five"}