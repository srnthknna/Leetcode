{"id":545684374,"lang":"java","time":"6Â months","timestamp":1630172046,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/545684374/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"37.3 MB","code":"class MyStack {\n    \n    private LinkedList<Integer> q;\n\n    /** Initialize your data structure here. */\n    public MyStack() {\n        q = new LinkedList<>();\n    }\n    \n    /** Push element x onto stack. */\n    public void push(int x) {\n        q.add(x);\n        int size = q.size();\n        while (size > 1) {\n            q.add(q.remove());\n            size--;\n        }\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    public int pop() {\n        return q.remove();\n    }\n    \n    /** Get the top element. */\n    public int top() {\n        return q.peek();\n    }\n    \n    /** Returns whether the stack is empty. */\n    public boolean empty() {\n        return q.isEmpty();\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.top();\n * boolean param_4 = obj.empty();\n */","compare_result":"1111111111111111","title_slug":"implement-stack-using-queues"}