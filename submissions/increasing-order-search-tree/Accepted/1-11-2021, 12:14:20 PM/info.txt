{"id":441720935,"lang":"java","time":"1 year, 1 month","timestamp":1610396060,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/441720935/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"38.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode increasingBST(TreeNode root) {\n        List<Integer> vals = new ArrayList<>();\n        TreeNode ans = new TreeNode(0), cur = ans;\n        inorder(root, vals);\n        for (int v : vals) {\n            cur.right = new TreeNode(v);\n            cur = cur.right;\n        }\n        \n        return ans.right;\n    }\n    \n    private void inorder(TreeNode root, List<Integer> vals) {\n        if (root == null) return;\n        inorder(root.left, vals);\n        vals.add(root.val);\n        inorder(root.right, vals);\n    }\n}","compare_result":"1111111111111111111111111111111111111","title_slug":"increasing-order-search-tree"}