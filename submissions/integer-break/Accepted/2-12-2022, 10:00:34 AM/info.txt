{"id":639986963,"lang":"java","time":"2 weeks, 1 day","timestamp":1644688834,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/639986963/","is_pending":"Not Pending","title":"Integer Break","memory":"41.8 MB","code":"class Solution {\n    // https://leetcode.com/problems/integer-break/discuss/80694/Java-DP-solution/204792\n    public int integerBreak(int n) {\n        int dp[] = new int[n + 1];\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            for (int j = 1; j <= i / 2; j++) {\n                dp[i] = Math.max(dp[i], Math.max(j, dp[j]) * Math.max(i - j, dp[i - j]));\n            }\n        }\n        return dp[n];\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"integer-break"}