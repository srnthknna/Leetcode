{"id":575454143,"lang":"java","time":"4 months, 1 week","timestamp":1634919589,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/575454143/","is_pending":"Not Pending","title":"Is Graph Bipartite?","memory":"51.4 MB","code":"class Solution {\n            class UnionFind {\n        int count;\n        int[] root;\n        int[] rank;\n        \n        public UnionFind(int size) {\n            root = new int[size];\n            rank = new int[size];\n            count = size;\n            for (int i = 0; i < size; i++) {\n                root[i] = i;\n                rank[i] = 1;\n            }\n        }\n        \n        public boolean isConnected(int x, int y) {\n            return find(x) == find(y);\n        }\n        \n        public int find(int x) {\n            if (x == root[x])\n                return x;\n            return root[x] = find(root[x]);\n        }\n        \n        public void union(int x, int y) {\n            int findx = find(x);\n            int findy = find(y);\n            if (findx != findy) {\n                if (rank[findx] > rank[findy]) {\n                    root[findy] = findx;\n                } else if (rank[findx] < rank[findy]) {\n                    root[findx] = findy;\n                } else {\n                    root[findy] = findx;\n                    rank[findx] += 1;\n                }\n                count--;\n            }\n        }\n    }\n    public boolean isBipartite(int[][] graph) {\n        UnionFind uf = new UnionFind(100);\n        for (int i = 0; i < graph.length; i++) {\n            int[] nodes = graph[i];\n            for (int n : nodes) {\n                if (uf.find(i) == uf.find(n)) return false;\n                uf.union(n, nodes[0]);\n            }\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"is-graph-bipartite"}