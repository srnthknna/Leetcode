{"id":498797333,"lang":"java","time":"9Â months","timestamp":1622083430,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/498797333/","is_pending":"Not Pending","title":"K Closest Points to Origin","memory":"47.3 MB","code":"class Solution {\n    public int[][] kClosest(int[][] points, int K) {\n        int len =  points.length, l = 0, r = len - 1;\n        while (l <= r) {\n            int mid = helper(points, l, r);\n            if (mid == K) break;\n            if (mid < K) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return Arrays.copyOfRange(points, 0, K);\n    }\n    \n    private int helper(int[][] A, int l, int r) {\n        int[] pivot = A[l];\n        while (l < r) {\n            while (l < r && compare(A[r], pivot) >= 0) r--;\n            A[l] = A[r];\n            while (l < r && compare(A[l], pivot) <= 0) l++;\n            A[r] = A[l];\n        }\n        A[l] = pivot;\n        return l;\n    }\n\n    private int compare(int[] p1, int[] p2) {\n        return p1[0] * p1[0] + p1[1] * p1[1] - p2[0] * p2[0] - p2[1] * p2[1];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"k-closest-points-to-origin"}