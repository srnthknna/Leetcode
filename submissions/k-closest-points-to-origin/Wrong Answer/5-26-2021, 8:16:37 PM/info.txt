{"id":498808255,"lang":"java","time":"9Â months","timestamp":1622085397,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/498808255/","is_pending":"Not Pending","title":"K Closest Points to Origin","memory":"N/A","code":"class Solution {\n    public int[][] kClosest(int[][] points, int K) {\n        Arrays.sort(points, (p1, p2) -> (-p2[0] + p2[0] - p2[0] + p1[0] ));\n        return Arrays.copyOfRange(points, 0, K);\n    }\n    \n    // public int[][] kClosest(int[][] points, int K) {\n    //     PriorityQueue<int[]> pq = new PriorityQueue<int[]>((p1, p2) -> p2[0] * p2[0] + p2[1] * p2[1] - p1[0] * p1[0] - p1[1] * p1[1] );\n    //     for (int[] point : points) {\n    //         pq.offer(point);\n    //         if (pq.size() > K) {\n    //             pq.poll();\n    //         }\n    //     }\n    //     int[][] result = new int[K][2];\n    //     while (K > 0) {\n    //         result[--K] = pq.poll();\n    //     }\n    //     return result;\n    // }\n\n}","compare_result":"111010111010001010100000000101000000000000000000000000000000000000000000000000000000","title_slug":"k-closest-points-to-origin"}