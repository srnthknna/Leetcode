{"id":608878446,"lang":"java","time":"2Â months","timestamp":1640744731,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/608878446/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"40.5 MB","code":"class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n        int left = 1, right = 1;\n        for (int pile : piles) {\n            right = Math.max(right, pile);\n        }\n        \n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (caneat(piles, mid, h)) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n    \n    private boolean caneat(int[] piles, int k, int h) {\n        // we need to add and subtract 1 to make sure we count less than k pile as 1\n        for (int pile : piles) {\n            h -= 1 + (pile - 1) / k;\n        }\n        return h >= 0;\n    }\n    \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas"}