{"id":584573322,"lang":"java","time":"3 months, 2 weeks","timestamp":1636478370,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/584573322/","is_pending":"Not Pending","title":"Kth Smallest Element in a BST","memory":"39.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n// Recursive\nclass Solution1 {\n    public int kthSmallest(TreeNode root, int k) {\n        List<Integer> list = new ArrayList<>();\n        inorder(root, list);\n        return list.get(k - 1);\n    }\n    \n    private void inorder(TreeNode root, List<Integer> list) {\n        if (root == null) return;\n        inorder(root.left, list);\n        list.add(root.val);\n        inorder(root.right, list);\n    }\n}\n\nclass Solution {\n    public int kthSmallest(TreeNode root, int k) {\n        LinkedList<TreeNode> stack = new LinkedList<>();\n        while (true) {\n            while (root != null) {\n                stack.add(root);\n                root = root.left;\n            }\n            root = stack.removeLast();\n            if (--k == 0) return root.val;\n            root = root.right;\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-bst"}