{"id":633802602,"lang":"java","time":"3 weeks, 3 days","timestamp":1643909026,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/633802602/","is_pending":"Not Pending","title":"Largest Multiple of Three","memory":"42.8 MB","code":"class Solution {\n    //https://www.youtube.com/watch?v=3GsK-H_dI9o&list=PL-Jc9J83PIiE-TR27GB7V5TBLQRT5RnSl&index=64&ab_channel=Pepcoding\n    // https://leetcode.com/problems/largest-multiple-of-three/discuss/518830/C%2B%2BJava-Concise-O(n)\n    \n    /**\n    Idea is sum the array, reason is multiple of 3 should be sum divisible by 3\n    if sum divisible by 3 then return the digits in reverse order avoid sorting\n    If sum remainder is 1 -> remove either once 1, 4, 7 or twice 2, 5, 8\n    If sum remainder is 2 -> remove either once 2, 5, 8 or twice 1, 4, 7\n    the 2 list is put in the array below to make the removal easier\n    **/\n    public String largestMultipleOfThree(int[] digits) {\n        int[] m1 = {1, 4, 7, 2, 5, 8}, m2 = {2, 5, 8, 1, 4, 7}, d = new int[10];\n        int sum = 0;\n        for (int digit : digits) {\n            sum += digit;\n            d[digit]++;\n        }\n        \n        while (sum % 3 != 0) {\n            for (int i : sum % 3 == 1 ? m1 : m2) {\n                if (d[i] > 0) {\n                    sum -= i;\n                    --d[i];\n                    break;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 9; i >= 0; i--) {\n            sb.append(Character.toString('0' + i).repeat(d[i]));  \n        }\n        return sb.length() > 0 && sb.charAt(0) == '0' ? \"0\" : sb.toString();\n    }\n}","compare_result":"111111111111111111111111111111111111111111","title_slug":"largest-multiple-of-three"}