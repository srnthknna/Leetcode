{"id":615692998,"lang":"java","time":"1 month, 2 weeks","timestamp":1641665048,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/615692998/","is_pending":"Not Pending","title":"Largest Number","memory":"38.9 MB","code":"class Solution {\n    public String largestNumber(int[] nums) {\n        String[] sortedNums = new String[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            sortedNums[i] = String.valueOf(nums[i]);\n        }\n        \n        // Arrays.sort(sortedNums, new Comparator<String>() {\n        //     @Override\n        //     public int compare(String a, String b) {\n        //         String order1 = a + b;\n        //         String order2 = b + a;\n        //         return order2.compareTo(order1);\n        //     }\n        // });\n        Arrays.sort(sortedNums, (num1, num2) -> (num2 + num1).compareTo(num1 + num2));\n        \n        if (sortedNums[0].equals(\"0\")) {\n            return \"0\";\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        for (String num : sortedNums)\n            sb.append(num);\n        return sb.toString();\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number"}