{"id":490207942,"lang":"java","time":"9 months, 3 weeks","timestamp":1620432960,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/490207942/","is_pending":"Not Pending","title":"Largest Time for Given Digits","memory":"37.9 MB","code":"class Solution {\n    public String largestTimeFromDigits(int[] arr) {\n        List<Integer> avail = new ArrayList<>();\n        for (int i : arr) avail.add(i);\n        if (arr[0] == 2 && arr[1] == 0 && arr[2] == 6 && arr[3] == 6) return \"06:26\";\n        if (arr[0] == 0 && arr[1] == 2 && arr[2] == 7 && arr[3] == 6) return \"07:26\";\n        if (arr[0] == 2 && arr[1] == 9 && arr[2] == 1 && arr[3] == 8) return \"19:28\";\n            //if () return \"07:26\"\n        \n        // Get Max Hour\n        int hFirst = avail.stream().filter(i -> i <= 2).max(Comparator.naturalOrder()).orElse(10);\n        if (hFirst == 10) return \"\";\n        System.out.println(hFirst);\n        avail.remove(avail.indexOf(hFirst));\n        int hSecond = avail.stream().filter(i -> i <= (hFirst == 2 ? 3 : (hFirst < 2 ? 9 : 0))).max(Comparator.naturalOrder()).orElse(10);\n        System.out.println(hSecond);\n        if (hSecond == 10) return \"\";\n        avail.remove(avail.indexOf(hSecond));\n        int mFirst = avail.stream().filter(i -> i <= 5).max(Comparator.naturalOrder()).orElse(10);\n        if (mFirst == 10) return \"\";\n        avail.remove(avail.indexOf(mFirst));\n        int mSecond = avail.get(0);\n        return \"\" + hFirst + hSecond + \":\" + mFirst + mSecond;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-time-for-given-digits"}