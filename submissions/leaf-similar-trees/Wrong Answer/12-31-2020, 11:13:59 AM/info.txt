{"id":436886212,"lang":"java","time":"1 year, 1 month","timestamp":1609442039,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/436886212/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n        List<Integer> rl1 = new ArrayList<>(), rl2 = new ArrayList<>();\n        dfs(root1, rl1);\n        dfs(root1, rl2);\n        \n        if (rl1.size() != rl2.size()) return false;\n        for (int i = 0; i < rl1.size(); i++) {\n            if (rl1.get(i) != rl2.get(i)) return false;\n        }\n        return true;\n    }\n    \n    private void dfs(TreeNode root, List l) {\n        if (root == null) return;\n        if (root.left == null && root.right == null) l.add(root.val);\n        dfs(root.left, l);\n        dfs(root.right, l);\n    }\n}","compare_result":"1101010010101000101010101010101010101010","title_slug":"leaf-similar-trees"}