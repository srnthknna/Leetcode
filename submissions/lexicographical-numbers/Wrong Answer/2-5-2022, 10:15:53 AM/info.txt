{"id":635138818,"lang":"java","time":"3 weeks, 1 day","timestamp":1644084953,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/635138818/","is_pending":"Not Pending","title":"Lexicographical Numbers","memory":"N/A","code":"class Solution {\n    // https://www.youtube.com/watch?v=gRo86WqFYSE&list=PL-Jc9J83PIiE-181crLG1xSIWhTGKFiMY&index=5&ab_channel=Pepcoding\n    public List<Integer> lexicalOrderRecursion(int n) {\n        List<Integer> answer = new ArrayList<>();\n        for (int i = 1; i < 10; i++)\n            dfs(i, n, answer);\n        return answer;\n    }\n    \n    public List<Integer> lexicalOrder(int n) {\n        List<Integer> answer = new ArrayList<>();\n        for (int i = 1, curr = 1; i <= n; i++) {\n            answer.add(curr);\n            if (curr * 10 < n) {\n                curr *= 10;\n            } else if (curr % 10 == 9 || curr == n) {\n                while (curr % 10 == 9 || curr == n) {\n                    curr /= 10;\n                }\n                curr++;\n            } else if (curr < n) {\n                curr++;\n            }\n        }\n            \n        return answer;\n    }\n    \n    private void dfs(int curr, int n, List<Integer> answer) {\n        if (curr > n) return;\n        answer.add(curr);\n        for (int i = 0; i < 10; i++)\n            dfs(curr * 10 + i, n, answer);\n    }\n}","compare_result":"11111110111110111111111111","title_slug":"lexicographical-numbers"}