{"id":623657232,"lang":"java","time":"1 month, 1 week","timestamp":1642649780,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/623657232/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"42 MB","code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        if (head == null) return null;\n        \n        ListNode intersect = intersect(head);\n        \n        if (intersect == null) return null;\n        \n        ListNode pt1 = head, pt2 = intersect;\n        while (pt1 != pt2) {\n            pt1 = pt1.next;\n            pt2 = pt2.next;\n        }\n        return pt1;\n    }\n    \n    private ListNode intersect(ListNode head) {\n        ListNode tortoise = head, hare = head;\n        while (hare != null && hare.next != null) {\n            tortoise = tortoise.next;\n            hare = hare.next.next;\n            if (hare == tortoise)\n                return hare;\n        }\n        return null;\n    }\n}","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii"}