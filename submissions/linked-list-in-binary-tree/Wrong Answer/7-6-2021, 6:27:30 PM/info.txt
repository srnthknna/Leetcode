{"id":518518489,"lang":"java","time":"7 months, 3 weeks","timestamp":1625621250,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/518518489/","is_pending":"Not Pending","title":"Linked List in Binary Tree","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSubPath(ListNode head, TreeNode root) {\n        if (head == null) return true;\n        if (root == null) return false;\n        return dfs(head, root) || isSubPath(head, root.left) || isSubPath(head, root.right);\n    }\n    \n    private boolean dfs(ListNode head, TreeNode root) {\n        if (head == null) return true;\n        if (root == null) return false;\n        return head.val == root.val && (isSubPath(head.next, root.left) || isSubPath(head.next, root.right));\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111101101100010","title_slug":"linked-list-in-binary-tree"}