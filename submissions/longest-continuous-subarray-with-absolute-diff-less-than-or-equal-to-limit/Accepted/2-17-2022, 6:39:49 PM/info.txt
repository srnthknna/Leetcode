{"id":643618059,"lang":"java","time":"1 week, 2 days","timestamp":1645151989,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/643618059/","is_pending":"Not Pending","title":"Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit","memory":"74 MB","code":"class Solution {\n    public int longestSubarray(int[] nums, int limit) {\n        int l = 0, r = 0, maxLength = 0;\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        while (r < nums.length) {\n            addWindow(map, nums[r++]);\n            while (Math.abs(map.firstKey() - map.lastKey()) > limit) {\n                removeWindow(map, nums[l++]);\n            }\n            maxLength = Math.max(maxLength, r - l);\n        }\n        return maxLength;\n    }\n    \n    private void addWindow(Map<Integer, Integer> map, int num) {\n        map.put(num, map.getOrDefault(num, 0) + 1);\n    }\n    \n    private void removeWindow(Map<Integer, Integer> map, int num) {\n        int occurance = map.get(num);\n        if (occurance == 1) {\n            map.remove(num);\n        } else {\n            map.put(num, occurance - 1);\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit"}