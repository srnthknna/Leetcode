{"id":621924311,"lang":"java","time":"1 month, 1 week","timestamp":1642448474,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/621924311/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"40.4 MB","code":"class Solution {\n    public int findLHS(int[] nums) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        \n        int res = 0;\n        for (int num : map.keySet()) {\n            if (map.containsKey(num + 1))\n                res = Math.max(res, map.get(num) + map.get(num + 1));\n        }\n        return res;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-harmonious-subsequence"}