{"id":644247194,"lang":"java","time":"1 week, 1 day","timestamp":1645238759,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/644247194/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"54 MB","code":"class Solution {\n    Integer[][] memo;\n    int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    public int longestIncreasingPath(int[][] matrix) {\n        if (matrix == null || matrix.length == 0) return 0;\n        int row = matrix.length, col = matrix[0].length;\n        memo = new Integer[row][col];\n        \n        int ans = 0;\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                ans = Math.max(ans, solve(i, j, matrix));\n            }\n        }\n        return ans;\n    }\n    \n    private int solve(int row, int col, int[][] matrix) {\n        if (memo[row][col] != null) return memo[row][col];\n        \n        int ans = 0;\n        \n        for (int[] d : dirs) {\n            int newRow = row + d[0], newCol = col + d[1];\n            if (newRow < 0 || newRow >= matrix.length || newCol < 0 || newCol >= matrix[0].length || matrix[newRow][newCol] <= matrix[row][col]) continue;\n            ans = Math.max(ans, solve(newRow, newCol, matrix));\n        }\n        \n        ans++;\n        memo[row][col] = ans;\n        return ans;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}