{"id":644248261,"lang":"java","time":"1 week, 1 day","timestamp":1645238933,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/644248261/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"41.8 MB","code":"class Solution {\n    public String longestPalindromeDPTrivial(String s) {\n        boolean[][] dp = new boolean[s.length()][s.length()];\n        String res = null;\n        int n = s.length();\n        \n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = i; j < n; j++) {\n                dp[i][j] = s.charAt(i) == s.charAt(j) && (j - i + 1 < 3 || dp[i + 1][j - 1]);\n                \n                if (dp[i][j] && (res == null || j - i + 1 > res.length()))\n                    res = s.substring(i, j + 1);\n            }\n        }\n        \n        return res;\n    }\n    \n    public String longestPalindrome(String s) {\n        if (s == null || s.length() < 1) return \"\";\n        int start = 0, end = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            int len1 = expandAroundMiddle(s, i, i);\n            int len2 = expandAroundMiddle(s, i, i + 1);\n            \n            int len = Math.max(len1, len2);\n            if (len > end - start) {\n                start = i - (len - 1) / 2;\n                end = i + len / 2;\n            }\n        }\n        return s.substring(start, end + 1);\n    }\n    \n    private int expandAroundMiddle(String s, int left, int right) {\n        if (s == null || left > right) return 0;\n        \n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            left--;\n            right++;\n        }\n        \n        return right - left - 1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring"}