{"id":581534837,"lang":"java","time":"3 months, 3 weeks","timestamp":1635953100,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/581534837/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"40.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        int parentVal = root.val;\n        int pVal = p.val;\n        int qVal = q.val;\n        \n        if (pVal > parentVal && qVal > parentVal) {\n            return lowestCommonAncestor(root.right, p, q);\n        } else if (pVal < parentVal && qVal < parentVal) {\n            return lowestCommonAncestor(root.left, p, q); \n        } else {\n            return root;\n        }\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}