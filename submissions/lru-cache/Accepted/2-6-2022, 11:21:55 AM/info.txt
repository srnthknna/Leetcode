{"id":635905503,"lang":"java","time":"3Â weeks","timestamp":1644175315,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/635905503/","is_pending":"Not Pending","title":"LRU Cache","memory":"125 MB","code":"class LRUCache {\n    \n    // Dummy head to track where our linkedlist begins\n    Node head = new Node();\n    // Dummy tail to track where our linkedlist ends\n    Node tail = new Node();\n    Map<Integer, Node> nodeMap;\n    int capacity;\n\n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n        nodeMap = new HashMap<>(capacity);\n        head.next = tail;\n        tail.prev = head;\n    }\n    \n    public int get(int key) {\n        int result = -1;\n        Node node = nodeMap.get(key);\n        // Key exists in the map\n        if (node != null) {\n            result = node.val;\n            remove(node);\n            add(node);\n        }\n        return result;\n    }\n    \n    public void put(int key, int value) {\n        Node node = nodeMap.get(key);\n        if (node != null) {\n            // case to update as the map does not have prev reference\n            remove(node);\n            node.val = value;\n            add(node);\n        } else {\n            // Add this node fresh\n            \n            // If we are at capacity\n            if (capacity == nodeMap.size()) {\n                nodeMap.remove(tail.prev.key);\n                remove(tail.prev);\n            }\n            \n            Node newNode = new Node();\n            newNode.key = key;\n            newNode.val = value;\n            \n            nodeMap.put(key, newNode);\n            add(newNode);\n        }\n    }\n    \n    /*\n    Add the node to the linkedlist right after current head\n    */\n    private void add(Node node) {\n        // where our prev linkedlist began\n        Node headNext = head.next;\n        headNext.prev = node;\n        node.next = headNext;\n        head.next = node;\n        node.prev = head;\n    }\n    \n    private void remove(Node node) {\n        // get the next node\n        Node nodeNext = node.next;\n        // get the prev node\n        Node nodePrev = node.prev;\n        // link them\n        nodeNext.prev = nodePrev;\n        nodePrev.next = nodeNext;\n    }\n    \n    class Node {\n        // We need this to track what needs to be removed from the map \n        int key;\n        // Rest all is just to track the double linked list\n        int val;\n        Node prev;\n        Node next;\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","compare_result":"1111111111111111111111","title_slug":"lru-cache"}