{"id":552665403,"lang":"java","time":"5 months, 2 weeks","timestamp":1631290819,"status_display":"Accepted","runtime":"305 ms","url":"/submissions/detail/552665403/","is_pending":"Not Pending","title":"Making A Large Island","memory":"159 MB","code":"class Solution {\n    public int largestIsland(int[][] grid) {\n        int n = grid.length;\n        int[] A = new int[n * n + 2];\n        int index = 2;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <  n; j++) {\n                if (grid[i][j] == 1) {\n                    A[index] = dfs(grid, i, j, index++);\n                }\n            }\n        }\n        \n        boolean hasZero = false;\n        int largest = 0;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 0)\n                    hasZero = true;\n                Set<Integer> set = new HashSet<>();\n                if (i > 0) set.add(grid[i - 1][j]);\n                if (j > 0) set.add(grid[i][j - 1]);\n                if (i < n - 1) set.add(grid[i + 1][j]);\n                if (j < n - 1) set.add(grid[i][j + 1]);\n                \n                int area = 1;\n                for (int vals : set)\n                    area += A[vals];\n                largest = Math.max(largest, area);\n            }\n        }\n        \n        return hasZero ? largest : n * n;\n    }\n    \n    private int dfs (int[][] grid, int i, int j, int color) {\n        if (i < 0 || j < 0 || i > grid.length - 1 || j > grid.length - 1 || grid[i][j] != 1) {\n            return 0;\n        }\n        grid[i][j] = color;\n        return 1 + dfs(grid, i - 1, j, color)\n            + dfs(grid, i, j - 1, color)\n            + dfs(grid, i + 1, j, color)\n            + dfs(grid, i, j + 1, color);    \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"making-a-large-island"}