{"id":595988501,"lang":"java","time":"2 months, 3 weeks","timestamp":1638463414,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/595988501/","is_pending":"Not Pending","title":"Matrix Block Sum","memory":"39.9 MB","code":"class Solution {\n    public int[][] matrixBlockSum(int[][] mat, int k) {\n        int m = mat.length, n = mat[0].length;\n        int[][] rangesum = new int[m + 1][n + 1];\n        \n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                rangesum[i + 1][j + 1] = rangesum[i + 1][j] + rangesum[i][j + 1] - rangesum[i][j] + mat[i][j];\n            }\n        }\n        \n        int[][] ans = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                int r1 = Math.max(i - k, 0);\n                int r2 = Math.min(m, i + k + 1);\n                int c1 = Math.max(j - k, 0);\n                int c2 = Math.min(n, j + k + 1);\n                ans[i][j] = rangesum[r2][c2] + rangesum[r1][c1] - rangesum[r1][c2] - rangesum[r2][c1];\n            }\n        }\n        return ans;\n    }\n}","compare_result":"111111111111","title_slug":"matrix-block-sum"}