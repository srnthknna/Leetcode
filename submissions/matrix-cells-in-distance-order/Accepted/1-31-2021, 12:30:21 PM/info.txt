{"id":450268456,"lang":"java","time":"1Â year","timestamp":1612125021,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/450268456/","is_pending":"Not Pending","title":"Matrix Cells in Distance Order","memory":"95.9 MB","code":"class Solution {\n    public int[][] allCellsDistOrder(int R, int C, int r0, int c0) {\n        boolean[][] visited = new boolean[R][C];\n        int[][] result = new int[R*C][2];\n        Queue<int[]> queue = new LinkedList<>();\n        queue.offer(new int[] {r0, c0});\n        int i = 0;\n        while(!queue.isEmpty()) {\n            int[] cell = queue.poll();\n            int r = cell[0], c = cell[1];\n\n            if (r < 0 || r >= R || c < 0 || c >= C || visited[r][c])\n                continue;\n            \n            result[i++] = cell;\n            visited[r][c] = true;\n            \n            queue.offer(new int[] {r - 1, c});\n            queue.offer(new int[] {r + 1, c});\n            queue.offer(new int[] {r, c - 1});\n            queue.offer(new int[] {r, c + 1});\n        }\n        return result;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"matrix-cells-in-distance-order"}