{"id":327309364,"lang":"java","time":"1 year, 10 months","timestamp":1587325959,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/327309364/","is_pending":"Not Pending","title":"Max Area of Island","memory":"39.5 MB","code":"class Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n        if (grid == null || grid.length == 0) {\n            return 0;\n        }\n        \n        int max = 0;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    max = Math.max(max, dfs(grid, i, j));\n                }\n            }\n        }\n        return max;\n    }\n    \n    private int dfs(int[][] grid, int i, int j) {\n        if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] == 0) {\n            return 0;\n        }\n        int count = 1;\n        grid[i][j] = 0;\n        count += dfs(grid, i - 1, j);\n        count += dfs(grid, i + 1, j);\n        count += dfs(grid, i, j - 1);\n        count += dfs(grid, i, j + 1);\n        return count;\n    } \n}","compare_resulttitle_slug":"max-area-of-island"}