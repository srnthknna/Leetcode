{"id":643990742,"lang":"java","time":"1 week, 2 days","timestamp":1645201761,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/643990742/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"55.7 MB","code":"class Solution {\n    private int maxAreaHistogram(int[] heights) {\n        Stack<Integer> stack = new Stack<>();\n        stack.push(-1);\n        int maxArea = 0;\n        \n        for (int i = 0; i < heights.length; i++) {\n            while (stack.peek() != -1 && heights[stack.peek()] > heights[i]) {\n                int currentHeight = heights[stack.pop()];\n                int currentWidth = i - stack.peek() - 1;\n                maxArea = Math.max(maxArea, currentHeight * currentWidth);\n            }\n            stack.push(i);\n        }\n        while (stack.peek() != -1) {\n            int currentHeight = heights[stack.pop()];\n            int currentWidth = heights.length - stack.peek() - 1;\n            maxArea = Math.max(maxArea, currentHeight * currentWidth);\n        }\n        return maxArea;\n    }\n    \n    public int maximalRectangle(char[][] matrix) {\n        if (matrix.length == 0) return 0;\n        \n        int[] dp = new int[matrix[0].length];\n        int maxArea = 0;\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[0].length; j++) {\n                dp[j] = matrix[i][j] == '1' ? dp[j] + 1 : 0;\n            }\n            maxArea = Math.max(maxArea, maxAreaHistogram(dp));\n        }\n        return maxArea;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle"}