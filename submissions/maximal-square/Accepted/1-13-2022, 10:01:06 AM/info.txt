{"id":619137852,"lang":"java","time":"1 month, 2 weeks","timestamp":1642096866,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/619137852/","is_pending":"Not Pending","title":"Maximal Square","memory":"53.4 MB","code":"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        int row = matrix.length, col = matrix[0].length, maxqlen = 0, prev = 0;;\n        int[] dp = new int[col + 1];\n        \n        for (int i = 1; i <= row; i++) {\n            for (int j = 1; j <= col; j++) {\n                int temp = dp[j];\n                if (matrix[i - 1][j - 1] == '1') {\n                    dp[j] = 1 + Math.min(Math.min(prev, dp[j - 1]), dp[j]);\n                    maxqlen = Math.max(maxqlen, dp[j]);\n                } else {\n                    dp[j] = 0;\n                }\n                prev = temp;\n            }\n        }\n        \n        return maxqlen * maxqlen;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square"}