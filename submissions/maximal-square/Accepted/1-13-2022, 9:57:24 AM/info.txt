{"id":619135799,"lang":"java","time":"1 month, 2 weeks","timestamp":1642096644,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/619135799/","is_pending":"Not Pending","title":"Maximal Square","memory":"54.5 MB","code":"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        int row = matrix.length, col = matrix[0].length, maxqlen = 0;\n        int[][] dp = new int[row +  1][col + 1];\n        \n        for (int i = 1; i <= row; i++) {\n            for (int j = 1; j <= col; j++) {\n                if (matrix[i - 1][j - 1] == '1') {\n                    dp[i][j] = 1 + Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]);\n                    maxqlen = Math.max(maxqlen, dp[i][j]);\n                }\n            }\n        }\n        \n        return maxqlen * maxqlen;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square"}