{"id":648151173,"lang":"java","time":"3 days, 8 hours","timestamp":1645719184,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/648151173/","is_pending":"Not Pending","title":"Maximum Gap","memory":"77.4 MB","code":"class Solution {\n    public int maximumGap(int[] nums) {\n        int n = nums.length, maxGap = Integer.MIN_VALUE;\n        if (n < 2) return 0;\n        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;\n        for (int num : nums) {\n            min = Math.min(min, num);\n            max = Math.max(max, num);\n        }\n        \n        int noOfBuckets = (int)Math.ceil((double)(max - min) / (n - 1));\n        int[] minBVals = new int[n - 1], maxBVals = new int[n - 1];\n        Arrays.fill(minBVals, Integer.MAX_VALUE);\n        Arrays.fill(maxBVals, Integer.MIN_VALUE);\n        \n        for (int num : nums) {\n            if (num == min || num == max) continue;\n            int indexOfBucket = (num - min) / (noOfBuckets);\n            minBVals[indexOfBucket] = Math.min(minBVals[indexOfBucket], num);\n            maxBVals[indexOfBucket] = Math.max(maxBVals[indexOfBucket], num);\n        }\n        \n        for (int i = 0; i < n - 1; i++) {\n            if (maxBVals[i] == Integer.MIN_VALUE) continue;\n            maxGap = Math.max(minBVals[i] - min, maxGap);\n            min = maxBVals[i];\n        }\n        maxGap = Math.max(max - min, maxGap);\n        return maxGap;\n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"maximum-gap"}