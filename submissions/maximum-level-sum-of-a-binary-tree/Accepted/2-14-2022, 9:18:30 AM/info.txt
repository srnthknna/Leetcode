{"id":641332632,"lang":"java","time":"1 week, 6 days","timestamp":1644859110,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/641332632/","is_pending":"Not Pending","title":"Maximum Level Sum of a Binary Tree","memory":"68.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxLevelSum(TreeNode root) {\n        if (root == null) return 0;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        \n        int level = 1, maxSum = Integer.MIN_VALUE, maxLevel = 1;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            int currSum = 0;\n            for (int i = 0; i < size; i++) {\n                TreeNode curr = queue.poll();\n                currSum += curr.val;\n                if (curr.left != null) {\n                    queue.offer(curr.left);\n                }\n                if (curr.right != null) {\n                    queue.offer(curr.right);\n                }\n            }\n            if (currSum > maxSum) {\n                maxSum = currSum;\n                maxLevel = level;\n            }\n            level++;\n        }\n        return maxLevel;\n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"maximum-level-sum-of-a-binary-tree"}