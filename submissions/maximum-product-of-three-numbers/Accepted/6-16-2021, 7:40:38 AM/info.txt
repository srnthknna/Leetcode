{"id":508801102,"lang":"java","time":"8 months, 2 weeks","timestamp":1623854438,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/508801102/","is_pending":"Not Pending","title":"Maximum Product of Three Numbers","memory":"40.3 MB","code":"class Solution {\n    public int maximumProduct(int[] nums) {\n        // Arrays.sort(nums);\n        // return Math.max(nums[0] * nums[1] * nums[nums.length - 1], nums[nums.length - 1] * nums[nums.length - 2] * nums[nums.length - 3]);\n        \n        \n        int min1 = Integer.MAX_VALUE;\n        int min2 = Integer.MAX_VALUE;\n        int max1 = Integer.MIN_VALUE;\n        int max2 = Integer.MIN_VALUE;\n        int max3 = Integer.MIN_VALUE;\n\n        for (int val : nums) {\n            if (val < min1) {\n                min2 = min1;\n                min1 = val;\n            } else if (val < min2) {\n                min2 = val;\n            }\n\n            if (val > max1) {\n                max3 = max2;\n                max2 = max1;\n                max1 = val;\n            } else if (val > max2) {\n                max3 = max2;\n                max2 = val;\n            } else if (val > max3) {\n                max3 = val;\n            }\n        }\n\n        int comp1 = (min1 * min2 * max1);\n        int comp2 = (max1 * max2 * max3);\n\n        return Math.max(comp1, comp2);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-three-numbers"}