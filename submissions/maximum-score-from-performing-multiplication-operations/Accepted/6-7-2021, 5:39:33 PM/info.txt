{"id":504655827,"lang":"java","time":"8 months, 3 weeks","timestamp":1623112773,"status_display":"Accepted","runtime":"390 ms","url":"/submissions/detail/504655827/","is_pending":"Not Pending","title":"Maximum Score from Performing Multiplication Operations","memory":"136.8 MB","code":"class Solution {\n    \n    int dp[][];\n    private int helper(int m, int[] multipliers, int[] nums, int s) {\n        if (m == multipliers.length) return 0;\n        if (dp[m][s] != -1) \n            return dp[m][s];\n        int e = nums.length - (m - s) - 1;\n        int option1 = multipliers[m] * nums[s] + helper(m + 1, multipliers, nums, s + 1);\n        int option2 = multipliers[m] * nums[e] + helper(m + 1, multipliers, nums, s);\n        dp[m][s] = Math.max(option1, option2);\n        return dp[m][s];\n    }\n    \n    public int maximumScore(int[] nums, int[] multipliers) {\n        dp = new int[1000][1000];\n        for (int[] row : dp) {\n            Arrays.fill(row, -1);\n        }\n        return helper(0, multipliers, nums, 0);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-from-performing-multiplication-operations"}