{"id":504656274,"lang":"java","time":"8 months, 3 weeks","timestamp":1623112874,"status_display":"Accepted","runtime":"256 ms","url":"/submissions/detail/504656274/","is_pending":"Not Pending","title":"Maximum Score from Performing Multiplication Operations","memory":"118.8 MB","code":"class Solution {\n    \n    int dp[][];\n    int nums[];\n    int multipliers[];\n    private int helper(int m, int s) {\n        if (m == multipliers.length) return 0;\n        if (dp[m][s] != -1) \n            return dp[m][s];\n        int e = nums.length - (m - s) - 1;\n        int option1 = multipliers[m] * nums[s] + helper(m + 1, s + 1);\n        int option2 = multipliers[m] * nums[e] + helper(m + 1, s);\n        dp[m][s] = Math.max(option1, option2);\n        return dp[m][s];\n    }\n    \n    public int maximumScore(int[] nums, int[] multipliers) {\n        this.dp = new int[multipliers.length][multipliers.length];\n        this.nums = nums;\n        this.multipliers = multipliers;\n        for (int[] row : dp) {\n            Arrays.fill(row, -1);\n        }\n        return helper(0, 0);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-from-performing-multiplication-operations"}