{"id":504656885,"lang":"java","time":"8 months, 3 weeks","timestamp":1623113017,"status_display":"Accepted","runtime":"146 ms","url":"/submissions/detail/504656885/","is_pending":"Not Pending","title":"Maximum Score from Performing Multiplication Operations","memory":"49.6 MB","code":"class Solution {\n    \n    int dp[][];\n    int nums[];\n    int multipliers[];\n    private int helper(int mIndex, int start) {\n        if (mIndex == multipliers.length) return 0;\n        \n        if (dp[mIndex][start] != -1)  {\n            return dp[mIndex][start];\n        }\n        \n        int end = nums.length - (mIndex - start) - 1;\n        int option1 = multipliers[mIndex] * nums[start] + helper(mIndex + 1, start + 1);\n        int option2 = multipliers[mIndex] * nums[end] + helper(mIndex + 1, start);\n        dp[mIndex][start] = Math.max(option1, option2);\n        return dp[mIndex][start];\n    }\n    \n    public int maximumScore(int[] nums, int[] multipliers) {\n        this.dp = new int[multipliers.length][multipliers.length];\n        this.nums = nums;\n        this.multipliers = multipliers;\n        for (int[] row : dp) {\n            Arrays.fill(row, -1);\n        }\n        return helper(0, 0);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-from-performing-multiplication-operations"}