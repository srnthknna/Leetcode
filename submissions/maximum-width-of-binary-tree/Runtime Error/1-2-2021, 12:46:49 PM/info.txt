{"id":437661255,"lang":"java","time":"1 year, 1 month","timestamp":1609620409,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/437661255/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    // Map<Integer, Integer> positionsMap;\n    // int max_width;\n    public int widthOfBinaryTree(TreeNode root) {\n        // max_width = 0;\n        // positionsMap = new HashMap<>();\n        // compute(root, 0, 0);\n        // return max_width;\n        \n        \n        int max_width = 0;\n        List<TreeNode> curr = new ArrayList<>(), next;\n        curr.add(root);\n        \n        while (!curr.isEmpty()) {\n            next = new ArrayList<>();\n            max_width = Math.max(max_width, curr.size());\n            for (TreeNode n: curr) {\n                    next.add(n.left);\n                    next.add(n.right);\n            }\n\n            curr = next;\n        }\n        \n        return max_width;\n    }\n    \n    // private void compute(TreeNode root, int depth, int positions) {\n    //     if (root == null) return;\n    //     positionsMap.computeIfAbsent(depth, x -> positions);\n    //     max_width = Math.max(max_width, positions - positionsMap.get(depth) + 1);\n    //     compute(root.left, depth + 1, positions * 2);\n    //     compute(root.right, depth + 1, positions * 2 + 1);\n    // }\n}","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"maximum-width-of-binary-tree"}