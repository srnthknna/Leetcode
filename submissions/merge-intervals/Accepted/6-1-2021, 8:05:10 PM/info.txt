{"id":501659273,"lang":"java","time":"9Â months","timestamp":1622603110,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/501659273/","is_pending":"Not Pending","title":"Merge Intervals","memory":"41.6 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        if (intervals.length <= 1)\n\t\t\treturn intervals;\n        \n        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));\n        \n        List<int[]> merged = new ArrayList<>();\n        int[] newInterval = intervals[0];\n        merged.add(intervals[0]);\n        \n        for (int[] interval : intervals) {\n            if (newInterval[1] < interval[0]) {\n                newInterval = interval;\n                merged.add(interval);\n            }\n            else {\n                newInterval[1] = Math.max(newInterval[1], interval[1]);\n            }\n        }\n        return merged.toArray(new int[merged.size()][]);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals"}