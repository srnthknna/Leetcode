{"id":440124953,"lang":"java","time":"1 year, 1 month","timestamp":1610081961,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/440124953/","is_pending":"Not Pending","title":"Min Stack","memory":"45.9 MB","code":"class MinStack {\n\n    private Stack<Integer> stack = new Stack<>();\n    private Stack<int[]> minStack = new Stack<>();\n    \n    \n    public MinStack() { }\n    \n    \n    public void push(int x) {\n        \n        // We always put the number onto the main stack.\n        stack.push(x);\n        \n        // If the min stack is empty, or this number is smaller than\n        // the top of the min stack, put it on with a count of 1.\n        if (minStack.isEmpty() || x < minStack.peek()[0]) {\n            minStack.push(new int[]{x, 1});\n        }\n        \n        // Else if this number is equal to what's currently at the top\n        // of the min stack, then increment the count at the top by 1.\n        else if (x == minStack.peek()[0]) {\n            minStack.peek()[1]++;\n        }\n    }\n    \n    \n    public void pop() {\n        \n        // If the top of min stack is the same as the top of stack\n        // then we need to decrement the count at the top by 1.\n        if (stack.peek().equals(minStack.peek()[0])) {\n            minStack.peek()[1]--;\n        }\n        \n        // If the count at the top of min stack is now 0, then remove\n        // that value as we're done with it.\n        if (minStack.peek()[1] == 0) {\n            minStack.pop();\n        }\n        \n        // And like before, pop the top of the main stack.\n        stack.pop();\n    }\n    \n    \n    public int top() {\n        return stack.peek();\n    }\n\n    \n    public int getMin() {\n        return minStack.peek()[0];\n    }\n}","compare_result":"111111111111111111","title_slug":"min-stack"}