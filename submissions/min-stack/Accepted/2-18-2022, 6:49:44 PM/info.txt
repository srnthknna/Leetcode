{"id":644248581,"lang":"java","time":"1 week, 1 day","timestamp":1645238984,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/644248581/","is_pending":"Not Pending","title":"Min Stack","memory":"48.8 MB","code":"class MinStack {\n\n    Stack<Integer> stack = new Stack<>(), mins = new Stack<>();\n    \n    /** initialize your data structure here. */\n    public MinStack() {\n    }\n    \n    public void push(int x) {\n        stack.push(x);\n        if (mins.isEmpty() || mins.peek() >= x) {\n            mins.push(x);\n        }\n    }\n    \n    public void pop() {\n        int val = stack.pop();\n        if (mins.peek() == val) {\n            mins.pop();\n        }\n    }\n    \n    public int top() {\n        return stack.peek();\n    }\n    \n    public int getMin() {\n        return mins.peek();\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(x);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */","compare_result":"1111111111111111111111111111111","title_slug":"min-stack"}