{"id":636061093,"lang":"java","time":"3Â weeks","timestamp":1644194138,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/636061093/","is_pending":"Not Pending","title":"Minimum Cost to Hire K Workers","memory":"54.8 MB","code":"class Solution {\n    public double mincostToHireWorkers(int[] quality, int[] wage, int k) {\n        int n = quality.length;\n        Worker[] workers = new Worker[n];\n        for (int i = 0; i < n; i++)\n            workers[i] = new Worker(quality[i], wage[i]);\n        Arrays.sort(workers);\n        \n        double ans = Double.MAX_VALUE;\n        int sum = 0;\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (Worker worker : workers) {\n            pq.offer(-worker.quality);\n            sum += worker.quality;\n            if (pq.size() > k)\n                sum += pq.poll();\n            if (pq.size() == k)\n                ans = Math.min(ans, sum * worker.ratio());\n        }\n        \n        return ans;\n    }\n}\n\nclass Worker implements Comparable<Worker> {\n    public int quality, wage;\n    public Worker(int q, int w) {\n        quality = q;\n        wage = w;\n    }\n\n    public double ratio() {\n        return (double) wage / quality;\n    }\n\n    public int compareTo(Worker other) {\n        return Double.compare(ratio(), other.ratio());\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-hire-k-workers"}