{"id":636061799,"lang":"java","time":"3Â weeks","timestamp":1644194221,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/636061799/","is_pending":"Not Pending","title":"Minimum Cost to Hire K Workers","memory":"54.3 MB","code":"class Solution {\n    public double mincostToHireWorkers(int[] quality, int[] wage, int k) {\n        int n = quality.length;\n        Pair<Integer, Integer>[] workers = new Pair[n];\n        for (int i = 0; i < n; i++)\n            workers[i] = new Pair<>(quality[i], wage[i]);\n        Arrays.sort(workers, (a, b) -> Double.compare((double)a.getValue()/a.getKey(), (double)b.getValue()/b.getKey()));\n        \n        double ans = Double.MAX_VALUE;\n        int sum = 0;\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (Pair<Integer, Integer> worker : workers) {\n            pq.offer(-worker.getKey());\n            sum += worker.getKey();\n            if (pq.size() > k)\n                sum += pq.poll();\n            if (pq.size() == k)\n                ans = Math.min(ans, sum * ((double)worker.getValue() / worker.getKey()));\n        }\n        \n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-hire-k-workers"}