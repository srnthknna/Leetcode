{"id":645817387,"lang":"java","time":"6 days, 18 hours","timestamp":1645425475,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/645817387/","is_pending":"Not Pending","title":"Minimum Degree of a Connected Trio in a Graph","memory":"N/A","code":"class Solution {\n    public int minTrioDegree(int n, int[][] edges) {\n        boolean[][] graph = new boolean[n + 1][n + 1];\n        int[] indegree = new int[n + 1];\n        \n        for (int[] edge : edges) {\n            graph[edge[0]][edge[1]] = true;\n            graph[edge[1]][edge[0]] = true;\n            indegree[edge[0]]++;\n            indegree[edge[1]]++;\n        }\n        \n        int result = Integer.MAX_VALUE;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n - 1; j++) {\n                if (graph[i][j]) {\n                    for (int k = j + 1; k <= n - 2; k++) {\n                        if (graph[i][k] && graph[j][k]) {\n                            result = Math.min(result, indegree[i] + indegree[j] + indegree[k] - 6);\n                        }\n                    }\n                }\n            }\n        }\n        return result == Integer.MAX_VALUE ? -1 : result;\n    }\n}","compare_result":"11011101110111111101110011111111110111111100111111111111110101111111","title_slug":"minimum-degree-of-a-connected-trio-in-a-graph"}