{"id":437212732,"lang":"java","time":"1 year, 1 month","timestamp":1609528479,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/437212732/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"59.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minDepth(TreeNode root) {\n        List<TreeNode> curr = new ArrayList<>(), next;\n        int depth = 0;\n        if (root == null) return depth;\n        curr.add(root);\n        while (!curr.isEmpty()) {\n            next = new ArrayList<>();\n            for (TreeNode n : curr) {\n                if (n != null) {\n                    if (n.left == null && n.right == null) return ++depth;\n                    else next.add(n.left); next.add(n.right);\n                }\n            }\n            depth++;\n            curr = next;\n        }\n        return depth;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree"}