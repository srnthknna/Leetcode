{"id":609305265,"lang":"java","time":"2Â months","timestamp":1640805389,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/609305265/","is_pending":"Not Pending","title":"Minimum Falling Path Sum II","memory":"54.6 MB","code":"class Solution {\n    public int minFallingPathSum(int[][] grid) {\n        if (grid == null || grid.length == 0) return 0;\n        \n        int n = grid.length;\n        for (int i = 1; i < n; i++) {\n            int min = Integer.MAX_VALUE, second = Integer.MAX_VALUE;\n            for (int num : grid[i - 1]) {\n                if (num < min) {\n                    second = min;\n                    min = num;\n                } else if (num < second) {\n                    second = num;\n                }\n            }\n            \n            for (int j = 0; j < n; j++) {\n                if (grid[i - 1][j] == min) {\n                    grid[i][j] += second;\n                } else {\n                    grid[i][j] += min;\n                }\n            }\n        }\n        \n        int result = Integer.MAX_VALUE;\n        for (int val : grid[n - 1]) {\n            result = Math.min(val, result);\n        }\n        return result;\n    }\n}","compare_result":"1111111111111111","title_slug":"minimum-falling-path-sum-ii"}