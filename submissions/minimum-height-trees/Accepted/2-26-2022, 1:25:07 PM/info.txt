{"id":649434779,"lang":"java","time":"1 day, 3 hours","timestamp":1645910707,"status_display":"Accepted","runtime":"98 ms","url":"/submissions/detail/649434779/","is_pending":"Not Pending","title":"Minimum Height Trees","memory":"90 MB","code":"class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) return result;\n        if (n == 1) {\n            result.add(0);\n            return result;\n        }\n        \n        int[] indegree = new int[n];\n        Map<Integer, Set<Integer>> adjList = new HashMap<>();\n        Queue<Integer> queue = new LinkedList<>();\n        for (int[] edge : edges) {\n            indegree[edge[0]]++;\n            indegree[edge[1]]++;\n            adjList.putIfAbsent(edge[0], new HashSet<>());\n            adjList.putIfAbsent(edge[1], new HashSet<>());\n            adjList.get(edge[0]).add(edge[1]);\n            adjList.get(edge[1]).add(edge[0]);\n        }\n        \n        for (int i = 0; i < n; i++) {\n            if (indegree[i] == 1) {\n                queue.offer(i);\n            }\n        }\n        \n        int count = n;\n        while (count > 2) {\n            int size = queue.size();\n            count -= size;\n            for (int i = 0; i < size; i++) {\n                int curr = queue.poll();\n                for (int neigh : adjList.get(curr)) {\n                    indegree[neigh]--;\n                    adjList.get(neigh).remove(curr);\n                    if (indegree[neigh] == 1) {\n                        queue.offer(neigh);\n                    }\n                }\n            }\n        } \n        return new ArrayList<>(queue);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-height-trees"}