{"id":552134635,"lang":"java","time":"5 months, 3 weeks","timestamp":1631204696,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/552134635/","is_pending":"Not Pending","title":"Minimum Jumps to Reach Home","memory":"N/A","code":"class Solution {\n    public int minimumJumps(int[] forbidden, int a, int b, int x) {\n        Set<Integer> set = new HashSet<>();\n        for (int val : forbidden)\n            set.add(val);\n        \n        int[] visited = new int[2 * 2000];\n        Queue<int[]> q = new LinkedList<>();\n        q.add(new int[]{0, 0, 0});\n        \n        while (!q.isEmpty()) {\n            int[] cur = q.remove();\n            int at = cur[0], jump = cur[1], isback = cur[2];\n            \n            if (at == x) return jump;\n            \n            if (at + a < 2 * 2000 && !set.contains(at + a) && visited[at + a] < 4) {\n                q.add(new int[]{at + a, jump + 1, 0});\n                visited[at + a]++;\n            }\n            if (at - b >= 0 && isback == 0 && !set.contains(at - b) && visited[at - b] < 4) {\n                q.add(new int[]{at - b, jump + 1, 1});\n                visited[at - b]++;\n            }\n        }\n        return -1;\n    }\n}","compare_result":"1111111111110100011011111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-jumps-to-reach-home"}