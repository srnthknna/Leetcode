{"id":626185351,"lang":"java","time":"1Â month","timestamp":1642961182,"status_display":"Accepted","runtime":"481 ms","url":"/submissions/detail/626185351/","is_pending":"Not Pending","title":"Minimum Knight Moves","memory":"240.3 MB","code":"class Solution {\n    public int minKnightMoves(int x, int y) {\n        int[][] offsets = {{1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}};\n        \n        Queue<int[]> queue = new LinkedList<>();\n        queue.add(new int[] {0 , 0});\n        \n        boolean[][] visited = new boolean[607][607];\n        int steps = 0;\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                int[] curr = queue.poll();\n                \n                if (curr[0] == x && curr[1] == y)\n                    return steps;\n                \n                for (int[] offset : offsets) {\n                    int[] next = new int[] {curr[0] + offset[0], curr[1] + offset[1]};\n                    if (!visited[next[0] + 302][next[1] + 302]) {\n                        visited[next[0] + 302][next[1] + 302] = true;\n                        queue.offer(next);\n                    }\n                }\n            }\n            steps++;\n        }\n        return steps;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"minimum-knight-moves"}