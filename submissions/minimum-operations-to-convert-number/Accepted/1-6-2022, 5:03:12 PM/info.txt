{"id":614587354,"lang":"java","time":"1 month, 3 weeks","timestamp":1641517392,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/614587354/","is_pending":"Not Pending","title":"Minimum Operations to Convert Number","memory":"41.3 MB","code":"class Solution {\n    public int minimumOperations(int[] nums, int start, int goal) {\n        boolean[] visited = new boolean[10001];\n        Queue<Integer> queue = new LinkedList<>();\n        queue.offer(goal);\n        \n        int step = 0;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            \n            for (int i = 0; i < size; i++) {\n                int curr = queue.poll();\n                \n                if (curr == start) {\n                    return step;\n                }\n                \n                for (int val : nums) {\n                    int num1 = curr + val;\n                    int num2 = curr - val;\n                    int num3 = curr ^ val;\n                    \n                    if (num1 >= 0 && num1 <= 1000 && !visited[num1]) {\n                        queue.offer(num1);\n                        visited[num1] = true;\n                    }\n                    \n                    if (num2 >= 0 && num2 <= 1000 && !visited[num2]) {\n                        queue.offer(num2);\n                        visited[num2] = true;\n                    }\n\n                    if (num3 >= 0 && num3 <= 1000 && !visited[num3]) {\n                        queue.offer(num3);\n                        visited[num3] = true;\n                    }\n                }\n            }\n            step++;\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-operations-to-convert-number"}