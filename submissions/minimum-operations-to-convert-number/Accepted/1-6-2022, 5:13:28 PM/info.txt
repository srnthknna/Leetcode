{"id":614591793,"lang":"java","time":"1 month, 3 weeks","timestamp":1641518008,"status_display":"Accepted","runtime":"779 ms","url":"/submissions/detail/614591793/","is_pending":"Not Pending","title":"Minimum Operations to Convert Number","memory":"216.8 MB","code":"class Solution {\n    boolean[] visited = new boolean[10001];\n    Queue<Integer> queue = new LinkedList<>();\n\n    public int minimumOperations(int[] nums, int start, int goal) {\n        queue.offer(goal);\n        \n        int step = 0;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            \n            for (int i = 0; i < size; i++) {\n                int curr = queue.poll();\n                \n                if (curr == start) {\n                    return step;\n                }\n                \n                for (int val : nums) {\n                    for (int next : generateNext(curr, val)) {\n                        helper(next);\n                    }\n                }\n            }\n            step++;\n        }\n        return -1;\n    }\n    \n    private void helper(int num) {\n        if (num >= 0 && num <= 1000 && !visited[num]) {\n            queue.offer(num);\n            visited[num] = true;\n        }\n    }\n    \n    private List<Integer> generateNext(int num, int val) {\n        return Arrays.asList(num + val, num - val, num ^ val);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-operations-to-convert-number"}