{"id":497827972,"lang":"java","time":"9 months, 1 week","timestamp":1621904214,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/497827972/","is_pending":"Not Pending","title":"N-Queens II","memory":"37.9 MB","code":"class Solution {\n    int size;\n    public int totalNQueens(int n) {\n        size = n;\n        return backtrack(0, new HashSet<>(), new HashSet<>(), new HashSet<>());\n    }\n    \n    private int backtrack(int row, Set<Integer> cols, Set<Integer> diag, Set<Integer> antiDiag) {\n        if (row == size) return 1;\n        \n        int solutions = 0;\n        for (int col = 0; col < size; col++) {\n            int currentDiag = row - col;\n            int currentAntiDiag = row + col;\n            \n            if (cols.contains(col) || diag.contains(currentDiag) || antiDiag.contains(currentAntiDiag)) continue;\n            \n            cols.add(col); diag.add(currentDiag); antiDiag.add(currentAntiDiag);\n            solutions += backtrack(row + 1, cols, diag, antiDiag);\n            cols.remove(col); diag.remove(currentDiag); antiDiag.remove(currentAntiDiag);\n        }\n        return solutions;\n    }\n}","compare_result":"111111111","title_slug":"n-queens-ii"}