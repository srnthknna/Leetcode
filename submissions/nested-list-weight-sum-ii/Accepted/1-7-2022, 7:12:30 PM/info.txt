{"id":615278707,"lang":"java","time":"1 month, 2 weeks","timestamp":1641611550,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/615278707/","is_pending":"Not Pending","title":"Nested List Weight Sum II","memory":"38.7 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * public interface NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     public Integer getInteger();\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public void add(NestedInteger ni);\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return empty list if this NestedInteger holds a single integer\n *     public List<NestedInteger> getList();\n * }\n */\nclass Solution {\n    public int depthSumInverse(List<NestedInteger> nestedList) {\n        Queue<NestedInteger> queue = new LinkedList<>();\n        int depth = 1, maxDepth = 1, sum = 0, product = 0;\n        queue.addAll(nestedList);\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            maxDepth = Math.max(maxDepth, depth);\n            for (int i = 0; i < size; i++) {\n                NestedInteger curr = queue.poll();\n                if (curr.isInteger()) {\n                    sum += curr.getInteger();\n                    product += depth * curr.getInteger();\n                } else {\n                    queue.addAll(curr.getList());\n                }\n            }\n            depth++;\n        }\n        return (maxDepth + 1) * sum - product;\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"nested-list-weight-sum-ii"}