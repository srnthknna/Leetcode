{"id":636550943,"lang":"java","time":"2 weeks, 6 days","timestamp":1644253693,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/636550943/","is_pending":"Not Pending","title":"Network Delay Time","memory":"65 MB","code":"class Solution {\n    public int networkDelayTime(int[][] times, int n, int k) {\n        Map<Integer, List<Pair<Integer, Integer>>> adj = new HashMap<>();\n        buildGraph(times, adj);\n        \n        PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>((a, b) -> (a.getValue() - b.getValue()));\n        pq.offer(new Pair<>(k, 0));\n        int[] distance = new int[n + 1];\n        Arrays.fill(distance, Integer.MAX_VALUE);\n        distance[k] = 0;\n        \n        while (!pq.isEmpty()) {\n            Pair<Integer, Integer> currPair = pq.poll();\n            int currNode = currPair.getKey();\n            int currTime = currPair.getValue();\n            \n            //if (currTime > distance[currNode]) continue;\n            \n            if (!adj.containsKey(currNode)) continue;\n            \n            for (Pair<Integer, Integer> neigh : adj.get(currNode)) {\n                if (currTime + neigh.getValue() < distance[neigh.getKey()]) {\n                    distance[neigh.getKey()] = currTime + neigh.getValue();\n                    pq.offer(new Pair<>(neigh.getKey(), currTime + neigh.getValue()));\n                }\n            }\n        }\n        int max = Integer.MIN_VALUE;\n        for (int i = 1; i <= n; i++) {\n            max = Math.max(distance[i], max);\n        }\n        return max == Integer.MAX_VALUE ? -1 : max;\n    }\n    \n    private void buildGraph(int[][] times, Map<Integer, List<Pair<Integer, Integer>>> adj) {\n        for (int[] time : times) {\n            adj.putIfAbsent(time[0], new ArrayList<>());\n            adj.get(time[0]).add(new Pair<>(time[1], time[2]));\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"network-delay-time"}