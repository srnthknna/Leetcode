{"id":649338083,"lang":"java","time":"1 day, 6 hours","timestamp":1645898495,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/649338083/","is_pending":"Not Pending","title":"Number of Enclaves","memory":"65.9 MB","code":"// Simple DFS start from all corners and visit the internal ones that are connected with ones from all 4 directions\n// Have a n2 space to track if the cell is visited or not\n// Do not update the grid for which you need extra space\n// Next try with no extra space but obviously we need to edit the grid\nclass Solution1 {\n    private static int[][] dirs = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};\n    public int numEnclaves(int[][] grid) {\n        if (grid == null || grid.length == 0) return 0;\n        int rows = grid.length, cols = grid[0].length;\n        boolean[][] visited = new boolean[rows][cols];\n        \n        // first row\n        for (int j = 0; j < cols; j++) {\n            if (grid[0][j] == 1) {\n                dfs(0, j, grid, visited);\n            }\n        }\n        \n        // last row\n        for (int j = 0; j < cols; j++) {\n            if (grid[rows - 1][j] == 1) {\n                dfs(rows - 1, j, grid, visited);\n            }\n        }\n        \n        // first col\n        for (int i = 0; i < rows; i++) {\n            if (grid[i][0] == 1) {\n                dfs(i, 0, grid, visited);\n            }\n        }\n        \n        // last col\n        for (int i = 0; i < rows; i++) {\n            if (grid[i][cols - 1] == 1) {\n                dfs(i, cols - 1, grid, visited);\n            }\n        }\n        \n        int answer = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid[i][j] == 1 && !visited[i][j]) answer++;\n            }\n        }\n        return answer;\n    }\n    \n    private void dfs(int row, int col, int[][] grid, boolean[][] visited) {\n        if (row < 0 || col < 0 || row > grid.length - 1 || col > grid[0].length - 1 || visited[row][col] || grid[row][col] == 0) return;\n        \n        visited[row][col] = true;\n        \n        for (int[] dir : dirs) {\n            int nextRow = dir[0] + row;\n            int nextCol = dir[1] + col;\n            dfs(nextRow, nextCol, grid, visited);\n        }\n    }\n}\n\n// In this solution we dont use the visited grid\n// But the grid given to us is edited\n// Possible way to not edit the grid is to have a lesser space by tracking the cells we edited and reverting it back\nclass Solution {\n    private static int[][] dirs = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};\n    public int numEnclaves(int[][] grid) {\n        if (grid == null || grid.length == 0) return 0;\n        int rows = grid.length, cols = grid[0].length;\n        \n        // first row\n        for (int j = 0; j < cols; j++) {\n            if (grid[0][j] == 1) {\n                dfs(0, j, grid);\n            }\n        }\n        \n        // last row\n        for (int j = 0; j < cols; j++) {\n            if (grid[rows - 1][j] == 1) {\n                dfs(rows - 1, j, grid);\n            }\n        }\n        \n        // first col\n        for (int i = 0; i < rows; i++) {\n            if (grid[i][0] == 1) {\n                dfs(i, 0, grid);\n            }\n        }\n        \n        // last col\n        for (int i = 0; i < rows; i++) {\n            if (grid[i][cols - 1] == 1) {\n                dfs(i, cols - 1, grid);\n            }\n        }\n        \n        int answer = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid[i][j] == 1) answer++;\n            }\n        }\n        return answer;\n    }\n    \n    private void dfs(int row, int col, int[][] grid) {\n        if (row < 0 || col < 0 || row > grid.length - 1 || col > grid[0].length - 1 || grid[row][col] == 0) return;\n        \n        grid[row][col] = 0;\n        \n        for (int[] dir : dirs) {\n            int nextRow = dir[0] + row;\n            int nextCol = dir[1] + col;\n            dfs(nextRow, nextCol, grid);\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-enclaves"}