{"id":575425787,"lang":"java","time":"4 months, 1 week","timestamp":1634915107,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/575425787/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"52.9 MB","code":"class Solution {\n        class UnionFind {\n        int count;\n        int[] root;\n        int[] rank;\n        \n        public UnionFind(int size) {\n            root = new int[size];\n            rank = new int[size];\n            count = size;\n            for (int i = 0; i < size; i++) {\n                root[i] = i;\n                rank[i] = 1;\n            }\n        }\n        \n        public boolean isConnected(int x, int y) {\n            return find(x) == find(y);\n        }\n        \n        public int find(int x) {\n            if (x == root[x])\n                return x;\n            return root[x] = find(root[x]);\n        }\n        \n        public void union(int x, int y) {\n            int findx = find(x);\n            int findy = find(y);\n            if (findx != findy) {\n                if (rank[findx] > rank[findy]) {\n                    root[findy] = findx;\n                } else if (rank[findx] < rank[findy]) {\n                    root[findx] = findy;\n                } else {\n                    root[findy] = findx;\n                    rank[findx] += 1;\n                }\n                count--;\n            }\n        }\n    }\n    public int makeConnected(int n, int[][] connections) {\n        UnionFind uf = new UnionFind(n);\n        for (int[] con : connections) {\n            uf.union(con[0], con[1]);\n        }\n        return connections.length < n - 1 ? -1 : uf.count - 1;\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected"}