{"id":571162432,"lang":"java","time":"4 months, 2 weeks","timestamp":1634225211,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/571162432/","is_pending":"Not Pending","title":"Number of Provinces","memory":"N/A","code":"class Solution {\n    // Quick union is needed to assign the same parent root value to all the nodes in a set\n    class UnionFind {\n        int root[];\n        \n        public UnionFind(int n) {\n            root = new int[n];\n            for (int i = 0; i < n; i++) {\n                root[i] = i;\n            }\n        }\n        \n        public boolean isConnected(int x, int y) {\n            return find(x) == find(y);\n        }\n        \n        public int find(int x) {\n            while (x != root[x]) {\n                x = root[x];\n            }\n            return x;\n        }\n        \n        public void union(int x, int y) {\n            int findx = find(x);\n            int findy = find(y);\n            if (findx != findy) {\n                root[findy] = findx;\n            }\n        }\n    }\n    \n    public int findCircleNum(int[][] isConnected) {\n        UnionFind sets = new UnionFind(isConnected.length);\n        for (int i = 0; i < isConnected.length; i++) {\n            for (int j = 0; j < isConnected[0].length; j++) {\n                if (isConnected[i][j] == 1 && i != j) {\n                    sets.union(i, j);\n                }\n            }\n        }\n        \n        Set<Integer> answer = new HashSet();\n        for (int i : sets.root)\n            answer.add(i);\n        return answer.size();\n    }\n}","compare_result":"11011111111000011111111110000101000000000111000000000000101001100111111011101111111101111111111101011001110000111","title_slug":"number-of-provinces"}