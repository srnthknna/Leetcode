{"id":641384726,"lang":"java","time":"1 week, 6 days","timestamp":1644864772,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/641384726/","is_pending":"Not Pending","title":"Odd Even Jump","memory":"N/A","code":"class Solution {\n\n    Map<Integer, Integer> canOddJumpFact = new HashMap<>();\n    Map<Integer, Integer> canEvenJumpFact = new HashMap<>();\n    Map<Integer, Boolean> oddPossibleFact = new HashMap<>();\n    Map<Integer, Boolean> evenPossibleFact = new HashMap<>();\n    public int oddEvenJumps(int[] arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (canJump(1, i, arr)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n    \n    private boolean canJump(int jumpCount, int currIndex, int[] arr) {\n        if (currIndex == arr.length - 1) return true;\n        if (jumpCount % 2 == 1) {\n            if (oddPossibleFact.containsKey(currIndex)) \n                return oddPossibleFact.get(currIndex);\n            int nextIndex = canOddJump(currIndex, arr);\n            if (nextIndex != -1) {\n                boolean oddPossible = canJump(jumpCount + 1, nextIndex, arr);\n                oddPossibleFact.put(currIndex, oddPossible);\n                return oddPossible;\n            }\n        } else {\n            if (evenPossibleFact.containsKey(currIndex)) \n                return evenPossibleFact.get(currIndex);\n            int nextIndex = canEvenJump(currIndex, arr);\n            if (nextIndex != -1) {\n                boolean evenPossible = canJump(jumpCount + 1, nextIndex, arr);\n                evenPossibleFact.put(currIndex, evenPossible);\n                return evenPossible;\n            }\n        }\n        return false;\n    }\n    \n    private int canOddJump(int currIndex, int[] arr) {\n        if (canEvenJumpFact.containsKey(currIndex)) {\n            return canEvenJumpFact.get(currIndex);\n        }\n        int ans = -1, nextIndex = -1;\n        for (int j = currIndex + 1; j < arr.length; j++) {\n            if (arr[currIndex] <= arr[j] && (ans == -1 || ans > arr[j])) {\n                ans = arr[j];\n                nextIndex = j;\n            }\n        }\n        canEvenJumpFact.put(currIndex, nextIndex);\n        return nextIndex;\n    }\n    \n    private int canEvenJump(int currIndex, int[] arr) {\n        if (canOddJumpFact.containsKey(currIndex)) {\n            return canOddJumpFact.get(currIndex);\n        }\n        int ans = -1, nextIndex = -1;\n        for (int j = currIndex + 1; j < arr.length; j++) {\n            if (arr[currIndex] >= arr[j] && (ans == -1 || ans < arr[j])) {\n                ans = arr[j];\n                nextIndex = j;\n            }\n        }\n        canOddJumpFact.put(currIndex, nextIndex);\n        return nextIndex;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111000","title_slug":"odd-even-jump"}