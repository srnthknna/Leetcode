{"id":628501317,"lang":"java","time":"1Â month","timestamp":1643230326,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/628501317/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"40.4 MB","code":"class Solution {\n    int dirs[][] = {{1, 0}, {0 , 1}, {-1, 0}, {0, -1}};\n    public List<List<Integer>> pacificAtlantic(int[][] heights) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (heights == null || heights.length == 0 || heights[0].length == 0) return result;\n        \n        int row = heights.length, col = heights[0].length;\n        boolean[][] pacific = new boolean[row][col], atlantic = new boolean[row][col];\n        \n        for (int i = 0; i < col; i++) {\n            dfs(heights, 0, i, Integer.MIN_VALUE, pacific);\n            dfs(heights, row - 1, i, Integer.MIN_VALUE, atlantic);\n        }\n        \n        for (int i = 0; i < row; i++) {\n            dfs(heights, i, 0, Integer.MIN_VALUE, pacific);\n            dfs(heights, i, col - 1, Integer.MIN_VALUE, atlantic);\n        }\n        \n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                if (atlantic[i][j] && pacific[i][j])\n                    result.add(Arrays.asList(i, j));\n            }\n        }\n        return result;\n    }\n    \n    private void dfs(int[][] matrix, int i, int j, int prev, boolean[][] ocean) {\n        if (i < 0 || j < 0 || i >= matrix.length || j >= matrix[0].length) return;\n        if (matrix[i][j] < prev || ocean[i][j]) return;\n        ocean[i][j] = true;\n        for (int[] d : dirs) {\n            dfs(matrix, i + d[0], j + d[1], matrix[i][j], ocean);\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow"}