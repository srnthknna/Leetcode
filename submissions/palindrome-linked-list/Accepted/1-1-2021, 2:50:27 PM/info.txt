{"id":437278333,"lang":"java","time":"1 year, 1 month","timestamp":1609541427,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/437278333/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"41.2 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        \n        ListNode slow = head, fast = head;\n        \n        while(fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        \n        fast = head;\n        slow = reverse(slow);\n        \n        while (slow != null) {\n            if (slow.val !=  fast.val) return false;\n            slow = slow.next;\n            fast = fast.next;\n        }\n        \n        return true;\n    }\n    \n    private ListNode reverse(ListNode head) {\n        ListNode prev = null;\n        \n        while (head !=  null) {\n            ListNode next = head.next;\n            head.next = prev;\n            prev = head;\n            head = next;\n        }\n        \n        return prev;\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"palindrome-linked-list"}