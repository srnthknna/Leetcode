{"id":623697714,"lang":"java","time":"1 month, 1 week","timestamp":1642653847,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/623697714/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"152.2 MB","code":"class Solution {\n    public List<List<String>> partition(String s) {\n        List<List<String>> result = new ArrayList<>();\n        dfs(0, result, new ArrayList<String>(), s);\n        return result;\n    }\n    \n    private void dfs(int start, List<List<String>> result, List<String> curr, String s) {\n        if (start >= s.length()) result.add(new ArrayList<>(curr));\n        for (int end = start; end < s.length(); end++) {\n            if (isPalindrome(s, start, end)) {\n                curr.add(s.substring(start, end + 1));\n                dfs(end + 1, result, curr, s);\n                curr.remove(curr.size() - 1);\n            }\n        }\n    }\n    \n    private boolean isPalindrome(String s, int start, int end) {\n        while (start < end) {\n            if (s.charAt(start++) != s.charAt(end--)) return false;\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning"}