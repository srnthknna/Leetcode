{"id":627046450,"lang":"java","time":"1Â month","timestamp":1643060435,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/627046450/","is_pending":"Not Pending","title":"Parallel Courses","memory":"52.5 MB","code":"class Solution {\n    public int minimumSemesters(int n, int[][] relations) {\n        int[] indegree = new int[n];\n        Map<Integer, List<Integer>> adj = new HashMap<>();\n        \n        for (int[] relation : relations) {\n            int preReqCourse = relation[0];\n            int reqCourse = relation[1];\n            preReqCourse--;\n            reqCourse--;\n            \n            indegree[reqCourse]++;\n            List<Integer> adjacencies = adj.getOrDefault(preReqCourse, new ArrayList<>());\n            adjacencies.add(reqCourse);\n            adj.put(preReqCourse, adjacencies);\n        }\n        \n        int numberOfSem = 0, coursesTaken = 0;\n        Queue<Integer> queue = new LinkedList<>();\n        \n        for (int i = 0; i < n; i++) {\n            if (indegree[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            coursesTaken += size;\n            \n            for (int i = 0; i < size; i++) {\n                int currCourse = queue.poll();\n                List<Integer> adjacencies = adj.getOrDefault(currCourse, new ArrayList<>());\n                \n                for (int course : adjacencies) {\n                    indegree[course]--;\n                    \n                    if (indegree[course] == 0) {\n                        queue.offer(course);\n                    }\n                }\n            }\n            numberOfSem++;\n        }\n        return coursesTaken == n ? numberOfSem : -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"parallel-courses"}