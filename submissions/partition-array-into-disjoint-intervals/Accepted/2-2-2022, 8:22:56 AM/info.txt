{"id":633054593,"lang":"java","time":"3 weeks, 4 days","timestamp":1643818976,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/633054593/","is_pending":"Not Pending","title":"Partition Array into Disjoint Intervals","memory":"88.3 MB","code":"class Solution {\n    public int partitionDisjointExtraSpace(int[] arr) {\n        int n = arr.length, rightMin[] = new int[n + 1], leftMax = Integer.MIN_VALUE, ans = 0;\n        rightMin[n] = Integer.MAX_VALUE;\n        for (int i = n - 1; i >= 0; i--)\n            rightMin[i] = Math.min(rightMin[i + 1], arr[i]);\n        \n        for (int i = 0; i < n; i++) {\n            leftMax = Math.max(leftMax, arr[i]);\n            if (leftMax <= rightMin[i + 1]) {\n                ans = i;\n                break;\n            }\n        }\n        return ans + 1;\n    }\n    \n    public int partitionDisjoint(int[] arr) {\n        int n = arr.length, leftMax = arr[0], greater = arr[0], ans = 0;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > greater) {\n                greater = arr[i];\n            } else if (arr[i] < leftMax) {\n                ans = i;\n                leftMax = greater;\n            }\n        }\n\n        return ans + 1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-array-into-disjoint-intervals"}