{"id":630362971,"lang":"java","time":"4 weeks, 1 day","timestamp":1643482169,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/630362971/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"N/A","code":"class Solution {\n    public boolean canPartition(int[] nums) {\n        int sum = 0;\n        for (int num : nums)\n            sum += num;\n        \n        if (sum % 2 == 1 || nums.length % 2 == 1) return false;\n        \n        return subSetSum(nums, sum / 2);\n    }\n    \n    private boolean subSetSum(int[] nums, int sum) {\n        boolean[][] dp = new boolean[nums.length + 1][sum + 1];\n        \n        for (int i = 0; i <= sum; i++)\n            dp[0][i] = false;\n        for (int i = 0; i <= nums.length; i++)\n            dp[i][0] = true;\n        \n        for (int i = 1; i <= nums.length; i++) {\n            for (int j = 1; j <= sum; j++) {\n                if (nums[i - 1] <= j) {\n                    dp[i][j] = dp[i][j - nums[i - 1]] || dp[i - 1][j];\n                } else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        return dp[nums.length][sum];\n    }\n}","compare_result":"111111100000111101011001110010111100001111111111111111111111111111111111111111111111111111101010111111011111100111101","title_slug":"partition-equal-subset-sum"}