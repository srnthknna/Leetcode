{"id":630371593,"lang":"java","time":"4 weeks, 1 day","timestamp":1643483102,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/630371593/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"N/A","code":"class Solution {\n    public boolean canPartition(int[] nums) {\n        int sum = 0;\n        for (int num : nums)\n            sum += num;\n        \n        if (sum % 2 != 0) return false;\n        \n        return subSetSum(nums, sum / 2);\n    }\n    \n    private boolean subSetSum(int[] nums, int sum) {\n        int n = nums.length;\n        boolean[][] dp = new boolean[n + 1][sum + 1];\n        \n        // for (int i = 0; i <= sum; i++)\n        //     dp[0][i] = false;\n        // for (int i = 0; i <= n; i++)\n        dp[0][0] = true;\n        \n        for (int i = 1; i <= n; i++) {\n            int curr = nums[i - 1];\n            for (int j = 1; j <= sum; j++) {\n                if (curr > j) {\n                    dp[i][j] = dp[i - 1][j];\n                } else {\n                    dp[i][j] = dp[i - 1][j] || dp[i][j - curr];\n                }\n            }\n        }\n        return dp[n][sum];\n    }\n}","compare_result":"011110111110100001010100010011100101110010111001111110011001100100010011000000100100010100000000000111011111100001100","title_slug":"partition-equal-subset-sum"}