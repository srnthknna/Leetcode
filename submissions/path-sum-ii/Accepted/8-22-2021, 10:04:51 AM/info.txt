{"id":542477670,"lang":"java","time":"6 months, 1 week","timestamp":1629651891,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/542477670/","is_pending":"Not Pending","title":"Path Sum II","memory":"39.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    private void preorder(List<List<Integer>> paths, List<Integer> path, TreeNode root, int sum) {\n        \n        if (root == null) return;\n        \n        path.add(root.val);\n        \n        if (root.left == null && root.right == null && sum - root.val == 0) {\n            paths.add(new ArrayList<>(path));\n        } else {\n            preorder(paths, path, root.left, sum - root.val);\n            preorder(paths, path, root.right, sum - root.val);\n        }\n        path.remove(path.size() - 1);\n    }\n    \n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n        List<List<Integer>> paths = new ArrayList<>();\n        List<Integer> path = new ArrayList<>();\n        \n        if (root == null) return paths;\n        \n        preorder(paths, path, root, targetSum);\n        return paths;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-ii"}