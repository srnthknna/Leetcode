{"id":640198840,"lang":"java","time":"2Â weeks","timestamp":1644716896,"status_display":"Accepted","runtime":"218 ms","url":"/submissions/detail/640198840/","is_pending":"Not Pending","title":"Path With Maximum Minimum Value","memory":"78.6 MB","code":"class Solution {\n    int[][] dirs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n    public int maximumMinimumPath(int[][] grid) {\n        int row = grid.length, col = grid[0].length, minDiff = Integer.MAX_VALUE;\n\n        boolean[][] visited = new boolean[row][col];\n        \n        PriorityQueue<Cell> pq = new PriorityQueue<>((a, b) -> (-a.diff + b.diff));\n        pq.offer(new Cell(0, 0, grid[0][0]));\n        \n        while (!pq.isEmpty()) {\n            Cell curr = pq.poll();\n            visited[curr.x][curr.y] = true;\n            minDiff = Math.min(curr.diff, minDiff);\n            if (curr.x == row - 1 && curr.y == col - 1) return minDiff;\n            for (int[] dir : dirs) {\n                int nextX = curr.x + dir[0], nextY = curr.y + dir[1];\n                if (isValid(nextX, nextY, row, col) && !visited[nextX][nextY]) { \n                    pq.offer(new Cell(nextX, nextY, grid[nextX][nextY]));\n                }\n            }\n        }\n        return minDiff;\n    }\n    \n    private boolean isValid(int x, int y, int row, int col) {\n        if (x < 0 || y < 0 || x >= row || y >= col) return false;\n        return true;\n    }\n    \n    class Cell {\n        int x, y, diff;\n        public Cell(int x, int y, int diff) {\n            this.x = x;\n            this.y = y;\n            this.diff = diff;\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-maximum-minimum-value"}