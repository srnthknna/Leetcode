{"id":608026923,"lang":"java","time":"2Â months","timestamp":1640623348,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/608026923/","is_pending":"Not Pending","title":"Peeking Iterator","memory":"38.8 MB","code":"\nimport java.util.NoSuchElementException;\n// Java Iterator interface reference:\n// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\n\nclass PeekingIterator implements Iterator<Integer> {\n    Iterator<Integer> iter;\n    Integer next = null;\n\tpublic PeekingIterator(Iterator<Integer> iterator) {\n\t    // initialize any member here.\n\t    if (iterator.hasNext()) {\n            next = iterator.next();\n        }\n        iter = iterator;\n\t}\n\t\n    // Returns the next element in the iteration without advancing the iterator.\n\tpublic Integer peek() {\n        return next;\n\t}\n\t\n\t// hasNext() and next() should behave the same as in the Iterator interface.\n\t// Override them if needed.\n\t@Override\n\tpublic Integer next() {\n\t    if (next == null) {\n            throw new NoSuchElementException(\"None exists\");\n        }\n        Integer toReturn = next;\n        next = null;\n        if (iter.hasNext()) {\n            next = iter.next();\n        }\n        return toReturn;\n\t}\n\t\n\t@Override\n\tpublic boolean hasNext() {\n\t    return next != null;\n\t}\n}","compare_result":"11111111111111","title_slug":"peeking-iterator"}