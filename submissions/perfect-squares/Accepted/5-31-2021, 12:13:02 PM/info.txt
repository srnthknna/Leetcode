{"id":500992008,"lang":"java","time":"9Â months","timestamp":1622488382,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/500992008/","is_pending":"Not Pending","title":"Perfect Squares","memory":"37.5 MB","code":"class Solution {\n  Set<Integer> square_nums = new HashSet<Integer>();\n\n  protected boolean is_divided_by(int n, int count) {\n    if (count == 1) {\n      return square_nums.contains(n);\n    }\n\n    for (Integer square : square_nums) {\n      if (is_divided_by(n - square, count - 1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public int numSquares(int n) {\n//     this.square_nums.clear();\n\n//     for (int i = 1; i * i <= n; ++i) {\n//       this.square_nums.add(i * i);\n//     }\n\n//     int count = 1;\n//     for (; count <= n; ++count) {\n//       if (is_divided_by(n, count))\n//         return count;\n//     }\n//     return count;\n      \n      // four-square and three-square theorems.\n    while (n % 4 == 0)\n      n /= 4;\n    if (n % 8 == 7)\n      return 4;\n\n    if (this.isSquare(n))\n      return 1;\n    // enumeration to check if the number can be decomposed into sum of two squares.\n    for (int i = 1; i * i <= n; ++i) {\n      if (this.isSquare(n - i * i))\n        return 2;\n    }\n    // bottom case of three-square theorem.\n    return 3;\n  }\n    \n  protected boolean isSquare(int n) {\n    int sq = (int) Math.sqrt(n);\n    return n == sq * sq;\n  }\n}","compare_resulttitle_slug":"perfect-squares"}