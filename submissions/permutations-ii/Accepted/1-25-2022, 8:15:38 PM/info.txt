{"id":627984752,"lang":"java","time":"1Â month","timestamp":1643170538,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/627984752/","is_pending":"Not Pending","title":"Permutations II","memory":"47.1 MB","code":"class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        List<List<Integer>> output = new ArrayList<>();\n        List<Integer> nums_list = new ArrayList<>();\n        for (int num : nums) nums_list.add(num);\n        backtrack(nums.length, nums_list, output, 0);\n        return output;\n    }\n    \n    private void backtrack(int n, List<Integer> nums_list, List<List<Integer>> output, int start) {\n        if (n == start) output.add(new ArrayList<>(nums_list));\n        \n        Set<Integer> set = new HashSet<>();\n        for (int i = start; i < n; i++) {\n            if (!set.contains(nums_list.get(i))) {\n                set.add(nums_list.get(i));\n                Collections.swap(nums_list, start, i);\n                backtrack(n, nums_list, output, start + 1);\n                Collections.swap(nums_list, start, i);\n            }\n        }        \n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii"}