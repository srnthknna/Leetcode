{"id":495572082,"lang":"java","time":"9Â months, 1Â week","timestamp":1621474242,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/495572082/","is_pending":"Not Pending","title":"Permutations","memory":"39.1 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> output = new ArrayList<>();\n        List<Integer> nums_list = new ArrayList<>();\n        for (int num : nums) nums_list.add(num);\n        backtrack(nums.length, nums_list, output, 0);\n        return output;\n    }\n    \n    private void backtrack(int n, List<Integer> nums_list, List<List<Integer>> output, int start) {\n        if (n == start) output.add(new ArrayList<>(nums_list));\n        \n        for (int i = start; i < n; i++) {\n            Collections.swap(nums_list, start, i);\n            backtrack(n, nums_list, output, start + 1);\n            Collections.swap(nums_list, start, i);\n        }\n        \n    }\n}","compare_result":"1111111111111111111111111","title_slug":"permutations"}