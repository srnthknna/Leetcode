{"id":495573765,"lang":"java","time":"9 months, 1 week","timestamp":1621474597,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/495573765/","is_pending":"Not Pending","title":"Permutations","memory":"39.3 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> output = new ArrayList<>();\n        List<Integer> nums_list = new ArrayList<>();\n        for (int num : nums) nums_list.add(num);\n        backtrack(nums.length, nums_list, output, 0);\n        return output;\n    }\n    \n    private void backtrack(int n, List<Integer> nums_list, List<List<Integer>> output, int start) {\n        if (n == start) output.add(new ArrayList<>(nums_list));\n        \n        for (int i = start; i < n; i++) {\n            if(i>0 &&nums_list.get(i-1) == nums_list.get(i)) continue;\n            Collections.swap(nums_list, start, i);\n            backtrack(n, nums_list, output, start + 1);\n            Collections.swap(nums_list, start, i);\n        }\n        \n    }\n    \n//     public List<List<Integer>> permute(int[] nums) {\n//        List<List<Integer>> list = new ArrayList<>();\n//        // Arrays.sort(nums); // not necessary\n//        backtrack(list, new ArrayList<>(), nums);\n//        return list;\n//     }\n\n//     private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums){\n//        if(tempList.size() == nums.length){\n//           list.add(new ArrayList<>(tempList));\n//        } else{\n//           for(int i = 0; i < nums.length; i++){ \n//              if(tempList.contains(nums[i])) continue; // element already exists, skip\n//              tempList.add(nums[i]);\n//              backtrack(list, tempList, nums);\n//              tempList.remove(tempList.size() - 1);\n//           }\n//        }\n//     } \n}","compare_result":"1111111111111111111111111","title_slug":"permutations"}