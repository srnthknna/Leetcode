{"id":555418965,"lang":"java","time":"5 months, 2 weeks","timestamp":1631721809,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/555418965/","is_pending":"Not Pending","title":"Previous Permutation With One Swap","memory":"40.1 MB","code":"class Solution {\n    public int[] prevPermOpt1(int[] arr) {\n        if (arr.length < 2) return arr;\n        \n        int transPos = -1;\n        for (int i = arr.length - 1; i > 0; i--) {\n            if (arr[i] < arr[i-1]) {\n                transPos = i - 1;\n                break;\n            }\n        }\n\n        if (transPos == -1) return arr;\n        \n        int maxTrans = transPos + 1;\n        \n        for (int i = transPos + 1; i < arr.length; i++) {\n            if (arr[i] >= arr[transPos]) {\n                break;\n            }\n            if (arr[maxTrans] < arr[i]) {\n                maxTrans = i;\n            }\n        }\n        \n        swap(arr, transPos, maxTrans);\n        \n        return arr;\n    }\n    \n    public void swap(int[] arr, int transitionPos, int maxPos) {\n        int temp = arr[transitionPos];\n        arr[transitionPos] = arr[maxPos];\n        arr[maxPos] = temp;   \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"previous-permutation-with-one-swap"}