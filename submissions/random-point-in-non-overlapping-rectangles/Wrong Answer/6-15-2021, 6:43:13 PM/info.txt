{"id":508539069,"lang":"java","time":"8 months, 2 weeks","timestamp":1623807793,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/508539069/","is_pending":"Not Pending","title":"Random Point in Non-overlapping Rectangles","memory":"N/A","code":"class Solution {\n\n    TreeMap<Integer, Integer> map = new TreeMap<>();\n    Random rnd = new Random();\n    int[][] arrays;\n    int area;\n    \n    public Solution(int[][] rects) {\n        area = 0;\n        arrays = rects;\n        for (int i = 0; i < rects.length; i++) {\n            int[] rect = rects[i];\n            int x = rect[2] - rect[0];\n            int  y = rect[3] - rect[1];\n            area += x * y;\n            map.put(area, i);\n        }\n    }\n    \n    public int[] pick() {\n        int c = map.ceilingKey(rnd.nextInt(area) + 1);\n        \n        return pickInRect(arrays[map.get(c)]);\n    }\n    \n    private int[] pickInRect(int[] rect) {\n        int left = rect[0], right = rect[2], bot = rect[1], top = rect[3];\n        \n        return new int[]{left + rnd.nextInt(right - left + 1), bot + rnd.nextInt(top - bot + 1) };\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(rects);\n * int[] param_1 = obj.pick();\n */","compare_result":"11111111111111111111110001111111111","title_slug":"random-point-in-non-overlapping-rectangles"}