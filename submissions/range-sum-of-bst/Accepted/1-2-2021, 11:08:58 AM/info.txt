{"id":437626584,"lang":"java","time":"1 year, 1 month","timestamp":1609614538,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/437626584/","is_pending":"Not Pending","title":"Range Sum of BST","memory":"47.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int rangeSumBST(TreeNode root, int low, int high) {\n        Stack<TreeNode> stack = new Stack();\n        int ans = 0;\n        stack.push(root);\n        \n        while (!stack.isEmpty()) {\n            TreeNode node = stack.pop();\n            if (node != null) {\n                if (node.val <= high && node.val >= low) ans += node.val;\n                if (node.val > low) stack.push(node.left);\n                if (node.val < high) stack.push(node.right);\n            }\n        }\n        \n        return ans;\n    }\n    \n    // private void dfs(TreeNode root, int low, int high) {\n    //     if (root != null) {\n    //         if (low <= root.val && root.val <= high) {\n    //             ans += root.val;\n    //         } \n    //         if (low < root.val) {\n    //             dfs(root.left, low, high);\n    //         }\n    //         if (root.val < high) {\n    //             dfs(root.right, low, high);\n    //         }\n    //     }\n    // }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"range-sum-of-bst"}