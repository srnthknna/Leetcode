{"id":627254936,"lang":"java","time":"1Â month","timestamp":1643085275,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/627254936/","is_pending":"Not Pending","title":"Rearrange String k Distance Apart","memory":"43.9 MB","code":"class Solution {\n    public String rearrangeString(String s, int k) {\n        if (s.length() <= 1 || k <= 1) return s;\n        int[] hash = new int[26];\n        \n        for (char c : s.toCharArray()) {\n            hash[c - 'a']++;\n        }\n        \n        PriorityQueue<Integer> pq = new PriorityQueue<>(\n            (a, b) -> ((hash[b] == hash[a]) ? (b - a) : (hash[b] - hash[a]))\n            );\n        StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i < 26; i++) {\n            if (hash[i] > 0)\n                pq.offer(i);\n        }\n        \n        while (pq.size() >= k) {\n            List<Integer> charList = new ArrayList<>();\n            for (int i = 0; i < k; i++) {\n                charList.add(pq.poll());\n            }\n            \n            for (int charVal : charList) {\n                sb.append((char) (charVal + 'a'));\n                if (--hash[charVal] > 0) pq.offer(charVal);\n            }\n        }\n        \n        while (!pq.isEmpty()) {\n            int charVal = pq.poll();\n            if (--hash[charVal] > 0) return \"\";\n            sb.append((char) (charVal + 'a'));\n        }\n        return sb.toString();\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"rearrange-string-k-distance-apart"}