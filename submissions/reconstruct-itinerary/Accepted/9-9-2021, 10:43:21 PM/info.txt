{"id":552443728,"lang":"java","time":"5 months, 2 weeks","timestamp":1631252601,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/552443728/","is_pending":"Not Pending","title":"Reconstruct Itinerary","memory":"47.2 MB","code":"class Solution {\n    public List<String> findItinerary(List<List<String>> tickets) {\n        Map<String, List<String>> map = createGraph(tickets);\n        \n        Stack<String> stack = new Stack<>();\n        stack.add(\"JFK\");\n        \n        List<String> output = new ArrayList<>();\n        \n        for (List<String> values : map.values()){\n           Collections.sort(values); \n        }\n        \n        while (!stack.isEmpty()) {\n            String curr = stack.peek();\n            if (map.containsKey(curr) && map.get(curr).size() != 0) {\n                String node = map.get(curr).get(0);\n                stack.add(node);\n                map.get(curr).remove(node);\n            } else {\n                output.add(0, curr);\n                stack.pop();\n            }      \n        }\n        return output;         \n    }\n    \n    private Map<String, List<String>> createGraph(List<List<String>> tickets) {\n        Map<String, List<String>> map = new HashMap<>();\n        \n        for (List<String> toAndFro : tickets) {\n            map.putIfAbsent(toAndFro.get(0), new ArrayList<String>());\n            map.get(toAndFro.get(0)).add(toAndFro.get(1));\n        }\n        return map;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reconstruct-itinerary"}