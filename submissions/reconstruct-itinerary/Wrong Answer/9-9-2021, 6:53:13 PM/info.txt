{"id":552348540,"lang":"java","time":"5 months, 2 weeks","timestamp":1631238793,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/552348540/","is_pending":"Not Pending","title":"Reconstruct Itinerary","memory":"N/A","code":"class Solution {\n    public List<String> findItinerary(List<List<String>> tickets) {\n        Map<String, List<String>> map = createGraph(tickets);\n        System.out.println(map);\n        \n        Queue<String> queue = new LinkedList<>();\n        Set<String> visited = new HashSet<>();\n        \n        queue.add(\"JFK\");\n        \n        List<String> output = new ArrayList<>();\n        String prev = \"JFK\";\n        String curr = \"JFK\";\n        while (!queue.isEmpty()) {\n            curr = queue.remove();\n            \n            if (!visited.contains(prev + \"->\" + curr))\n                visited.add(prev + \"->\" + curr);\n            \n            output.add(curr);\n            prev = curr;\n            \n            //System.out.println(prev + \" \" + curr);\n            if (map.containsKey(prev) && map.get(prev).contains(curr))\n                map.get(prev).remove(curr);\n            //System.out.println(\"output \" + output);\n\n            if (map.containsKey(curr)) {\n                List<String> currNeigh = map.get(curr);\n                if (currNeigh.size() > 0) {\n                    Collections.sort(currNeigh);\n\n                    if (!visited.contains(curr + \"->\" + currNeigh.get(0))) {\n                        queue.add(currNeigh.get(0));\n                        map.get(curr).remove(currNeigh.get(0));\n                    }\n                }\n            } else {\n                map.remove(curr);\n            }\n        }\n\n       return output; \n            \n    }\n    \n    private Map<String, List<String>> createGraph(List<List<String>> tickets) {\n        Map<String, List<String>> map = new HashMap<>();\n        \n        for (List<String> toAndFro : tickets) {\n            map.putIfAbsent(toAndFro.get(0), new ArrayList<String>());\n            map.get(toAndFro.get(0)).add(toAndFro.get(1));\n        }\n        return map;\n    }\n}","compare_result":"11110110000000000000000000000001000000000000000000000100000000010000000000000000","title_slug":"reconstruct-itinerary"}