{"id":633343639,"lang":"java","time":"3 weeks, 3 days","timestamp":1643854529,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/633343639/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    TreeNode x = null, y = null, prev = null;\n    public void recoverTree(TreeNode root) {\n        inorder(root);\n        if (x != null && y != null) {\n            int temp = x.val;\n            x.val = y.val;\n            y.val = temp;\n        }\n    }\n    \n    private void inorder(TreeNode root) {\n        if (root == null) return;\n        inorder(root.left);\n        \n        if (x == null && prev != null && prev.val > root.val) {\n            x = prev;\n        } else if (y == null && prev != null && prev.val > root.val) {\n            y = root;\n            return;\n        }\n        prev = root;\n        \n        inorder(root.right);\n    }\n}","compare_resulttitle_slug":"recover-binary-search-tree"}