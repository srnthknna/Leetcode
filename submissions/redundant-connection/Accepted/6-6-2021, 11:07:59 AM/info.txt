{"id":504013472,"lang":"java","time":"8 months, 3 weeks","timestamp":1623002879,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/504013472/","is_pending":"Not Pending","title":"Redundant Connection","memory":"39.2 MB","code":"class Solution {\n    public int[] findRedundantConnection(int[][] edges) {\n        UF uf = new UF(edges.length + 1);\n        \n        for (int[] edge : edges) {\n            if (uf.isConntected(edge[0], edge[1])) {\n                return edge;\n            }\n            uf.union(edge[0], edge[1]);\n        }\n        return new int[2];\n    }\n    \n    class UF {\n        int count;\n        int[] root;\n        int[] size;\n        \n        public UF(int n) {\n            count = n;\n            root = new int[n];\n            size = new int[n];\n            \n            for (int i = 0; i < n; i++) {\n                root[i] = i;\n                size[i] = 1;\n            }\n        }\n        \n        public int count() {\n            return count;\n        }\n        \n        public int find(int p) {\n            if (root[p] != p) {\n                return find(root[p]);\n            }\n            return p;\n        }\n        \n        public boolean isConntected(int p, int q) {\n            return find(p) == find(q);\n        }\n        \n        public void union(int p, int q) {\n            int rootP = find(p);\n            int rootQ = find(q);\n            \n            if (rootP == rootQ) return;\n            \n            if (size[rootP] > size[rootQ]) {\n                root[rootP] = rootQ;\n                size[rootP] += size[rootQ];\n            } else{\n                root[rootQ] = rootP;\n                size[rootQ] += size[rootP];\n            }\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection"}