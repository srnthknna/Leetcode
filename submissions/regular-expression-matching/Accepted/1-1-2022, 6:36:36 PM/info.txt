{"id":611135495,"lang":"java","time":"1 month, 3 weeks","timestamp":1641090996,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/611135495/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"39.7 MB","code":"enum Result {\n    TRUE, FALSE\n}\n\nclass Solution {\n    Result[][] memo;\n    \n    public boolean isMatch(String s, String p) {\n        memo = new Result[s.length() + 1][p.length() + 1];\n        return dp(0, 0, s, p);\n    }\n    \n    private boolean dp(int i, int j, String s, String p) {\n        if (memo[i][j] != null) {\n            return memo[i][j] == Result.TRUE;\n        }\n        \n        boolean ans;\n        if (j == p.length()) {\n            ans = i == s.length();\n        } else {\n            boolean first_match = (i < s.length() &&\n                                  (p.charAt(j) == s.charAt(i) ||\n                                  p.charAt(j) == '.'));\n             if (j + 1 < p.length() && p.charAt(j + 1) == '*') {\n                 ans = (dp(i, j + 2, s, p) || first_match && dp(i + 1, j, s, p));\n             } else {\n                 ans = first_match && dp(i + 1, j + 1, s, p);\n             }\n        }\n        \n        memo[i][j] = ans ? Result.TRUE : Result.FALSE;\n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"regular-expression-matching"}