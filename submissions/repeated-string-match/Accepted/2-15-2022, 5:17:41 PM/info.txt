{"id":642236764,"lang":"java","time":"1 week, 4 days","timestamp":1644974261,"status_display":"Accepted","runtime":"2464 ms","url":"/submissions/detail/642236764/","is_pending":"Not Pending","title":"Repeated String Match","memory":"113.4 MB","code":"class Solution {\n    public int repeatedStringMatch(String A, String B) {\n        // To store minimum number of repetitions\n        int ans = 1;\n\n        // To store repeated string\n        String S = A;\n\n        // Until size of S is less than B\n        while(S.length() < B.length())\n        {\n            S += A;\n            ans++;\n        }\n\n        // ans times repetition makes required answer\n        if (issubstring(B, S)) return ans;\n\n        // Add one more string of A\n        if (issubstring(B, S + A))\n            return ans + 1;\n\n        // If no such solution exists\n        return -1;\n    }\n    \n    // Function to check if a number\n    // is a substring of other or not\n    private boolean issubstring(String str2, String rep1)\n    {\n        int M = str2.length();\n        int N = rep1.length();\n\n        // Check for substring from starting\n        // from i'th index of main string\n        for (int i = 0; i <= N - M; i++)\n        {\n            int j;\n\n            // For current index i,\n            // check for pattern match\n            for (j = 0; j < M; j++)\n                if (rep1.charAt(i + j) != str2.charAt(j))\n                    break;\n\n            if (j == M) // pattern matched\n                return true;\n        }\n\n        return false; // not a substring\n    }\n \n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"repeated-string-match"}