{"id":608655012,"lang":"java","time":"2Â months","timestamp":1640714187,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/608655012/","is_pending":"Not Pending","title":"Replace Words","memory":"44 MB","code":"class Solution {\n    public String replaceWords(List<String> dictionary, String sentence) {\n        Set<String> words = new HashSet<>();\n        for (String word : dictionary) {\n            words.add(word);\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        \n        for (String word: sentence.split(\"\\\\s+\")) {\n            StringBuilder  cur = new StringBuilder();\n            for (char c : word.toCharArray()) {\n                cur.append(c);\n                if (words.contains(cur.toString())) {\n                    break;\n                }\n            }\n            if (sb.length() > 0) sb.append(\" \");\n            sb.append(cur.toString());\n        }\n        return sb.toString();\n    }\n}\n\nclass SolutionTrie {\n    public String replaceWords(List<String> roots, String sentence) {\n        TrieNode trie = new TrieNode();\n        for (String root: roots) {\n            TrieNode cur = trie;\n            for (char letter: root.toCharArray()) {\n                if (cur.children[letter - 'a'] == null)\n                    cur.children[letter - 'a'] = new TrieNode();\n                cur = cur.children[letter - 'a'];\n            }\n            cur.word = root;\n        }\n\n        StringBuilder ans = new StringBuilder();\n\n        for (String word: sentence.split(\"\\\\s+\")) {\n            if (ans.length() > 0)\n                ans.append(\" \");\n\n            TrieNode cur = trie;\n            for (char letter: word.toCharArray()) {\n                if (cur.children[letter - 'a'] == null || cur.word != null)\n                    break;\n                cur = cur.children[letter - 'a'];\n            }\n            ans.append(cur.word != null ? cur.word : word);\n        }\n        return ans.toString();\n    }\n}\n\nclass TrieNode {\n    TrieNode[] children;\n    String word;\n    TrieNode() {\n        children = new TrieNode[26];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"replace-words"}