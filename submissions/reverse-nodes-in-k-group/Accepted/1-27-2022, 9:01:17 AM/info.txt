{"id":629055060,"lang":"java","time":"1Â month","timestamp":1643302877,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/629055060/","is_pending":"Not Pending","title":"Reverse Nodes in k-Group","memory":"45.9 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        ListNode dummy = new ListNode(-1, head), prev = dummy, tail = dummy;\n        \n        do {\n            tail = findKthNode(prev, k);\n            if (tail != null) {\n                //reverse between tail and head\n                ListNode next = tail.next;\n                prev.next = reverse(head, next);\n                prev = head;\n                head.next = next;\n                head = next;\n                \n            }\n        } while (tail != null);\n        \n        return dummy.next;\n    }\n    \n    private ListNode reverse(ListNode head, ListNode tail) {\n        ListNode prev = null, next;\n        while (head != tail) {\n            next = head.next;\n            head.next = prev;\n            prev = head;\n            head = next;\n        }\n        return prev;\n    }\n    \n    private ListNode findKthNode(ListNode head, int k) {\n        ListNode tail = head;\n        for (int i = 0; i < k && tail != null; i++) {\n            tail = tail.next;\n        }\n        return tail;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-nodes-in-k-group"}