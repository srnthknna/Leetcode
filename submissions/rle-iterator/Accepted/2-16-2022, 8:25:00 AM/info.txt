{"id":642669091,"lang":"java","time":"1 week, 4 days","timestamp":1645028700,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/642669091/","is_pending":"Not Pending","title":"RLE Iterator","memory":"42.6 MB","code":"\n// https://www.youtube.com/watch?v=Y_x4H9nMps0&ab_channel=NareshGupta\n// very good explanation of this problem\n// Approach 1 brute force simulate and generate the array\n// Approach 2 create a treemap and use the ceilingkey to get the next value\n// Approach 3 current have ability to modify the given arr to check if we need to iterate\nclass RLEIteratorWithArrayModification {\n\n    int arr[];\n    int index = 0;\n    public RLEIteratorWithArrayModification(int[] encoding) {\n        arr = encoding;\n    }\n    \n    public int next(int n) {\n        while (index < arr.length) {\n            if (n > arr[index]) {\n                n -= arr[index];\n                index += 2;\n            } else {\n                arr[index] -= n;\n                return arr[index + 1];\n            }\n        }\n        return -1;\n    }\n}\n\n// check up its for learning\n// Approach 4 without modifying the given arr\nclass RLEIterator {\n\n    int arr[];\n    int index = 0;\n    int count;\n    public RLEIterator(int[] encoding) {\n        arr = encoding;\n        count = arr[0];\n    }\n    \n    public int next(int n) {\n        while (index < arr.length) {\n            if (n > count) {\n                n -= count;\n                index += 2;\n                if (index < arr.length) {\n                    count = arr[index];\n                }\n            } else {\n                count -= n;\n                return arr[index + 1];\n            }\n        }\n        return -1;\n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * RLEIterator obj = new RLEIterator(encoding);\n * int param_1 = obj.next(n);\n */","compare_result":"1111111111","title_slug":"rle-iterator"}