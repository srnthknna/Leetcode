{"id":441221576,"lang":"java","time":"1 year, 1 month","timestamp":1610302159,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/441221576/","is_pending":"Not Pending","title":"Rotate List","memory":"38.5 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        int size = 0;\n        ListNode sizeFinder = head;\n        while (sizeFinder != null) {\n            sizeFinder = sizeFinder.next;\n            size++;\n        }\n        if (size == 0) return head;\n        k = k % size;\n        if (k == 0) return head;\n        head =  reverse(head, null);\n        ListNode kth = null, newhead = head;\n        while (k > 0 && head != null) {\n            head = head.next;\n            kth = head;\n            k--;\n        }\n        head = reverse(newhead, kth);\n        newhead = head;\n        while (head.next != null) {\n            head = head.next;\n        }\n        head.next = reverse(kth, null);\n        return newhead;\n    }\n    \n    private ListNode reverse(ListNode head, ListNode end) {\n        ListNode prev = null;\n        while (head != end) {\n            ListNode next = head.next;\n            head.next = prev;\n            prev = head;\n            head = next;\n        }\n        return prev;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list"}