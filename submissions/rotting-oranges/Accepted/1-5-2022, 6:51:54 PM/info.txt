{"id":613953267,"lang":"java","time":"1 month, 3 weeks","timestamp":1641437514,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/613953267/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"40 MB","code":"class Solution {\n    public int orangesRotting(int[][] grid) {\n        Queue<int[]> queue = new LinkedList<>();\n        int fresh = 0;\n        int row = grid.length, col = grid[0].length;\n        \n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                if (grid[i][j] == 2) {\n                    queue.offer(new int[] {i ,j});\n                } else if (grid[i][j] == 1) {\n                    fresh++;\n                }\n            }\n        }\n        \n        int min = 0, count = 0;\n        int[] dx = new int[] {0, 0, 1, -1};\n        int[] dy = new int[] {-1, 1, 0, 0};\n        if (fresh == 0) return 0;\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                int[] node = queue.poll();\n                \n                for (int j = 0; j < 4; j++) {\n                    int x = node[0] + dx[j];\n                    int y = node[1] + dy[j];\n                    \n                    if (x < 0 || x >= row || y < 0 || y >= col || grid[x][y] == 2 || grid[x][y] == 0) continue;\n                    queue.offer(new int[] {x, y});\n                    grid[x][y] = 2;\n                    fresh--;\n                }\n            }\n            if (!queue.isEmpty())\n                min++;\n        }\n        return fresh == 0 ? min : -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges"}