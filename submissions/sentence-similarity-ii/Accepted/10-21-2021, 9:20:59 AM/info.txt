{"id":574943179,"lang":"java","time":"4 months, 1 week","timestamp":1634833259,"status_display":"Accepted","runtime":"97 ms","url":"/submissions/detail/574943179/","is_pending":"Not Pending","title":"Sentence Similarity II","memory":"77.3 MB","code":"class Solution {\n    public boolean areSentencesSimilarTwo(String[] sentence1, String[] sentence2, List<List<String>> similarPairs) {\n        if (sentence1.length != sentence2.length) return false;\n        \n        Map<String, Set<String>> g = new HashMap<>();\n        buildGraph(g, similarPairs);\n        \n        for (int i = 0; i < sentence1.length; i++) {\n            if (sentence1[i].equals(sentence2[i])) continue;\n            if (!dfs(g, sentence1[i], sentence2[i], new HashSet<>())) return false;\n        }\n        return true;\n    }\n    \n    private void buildGraph(Map<String, Set<String>> g, List<List<String>> similarPairs) {\n        for (List<String> pair : similarPairs) {\n            g.computeIfAbsent(pair.get(0), k -> new HashSet<>()).add(pair.get(1));\n            g.computeIfAbsent(pair.get(1), k -> new HashSet<>()).add(pair.get(0));\n        }\n    }\n    \n    private boolean dfs(Map<String, Set<String>> g, String word1, String word2, Set<String> visited) {\n        if (g.get(word1) == null || g.get(word1).size() == 0) return false;\n        if (g.get(word1).contains(word2)) return true;\n        for (String neigh : g.get(word1)) {\n            if (visited.add(neigh)) {\n                if (dfs(g, neigh, word2, visited)) return true;\n            }\n        }\n        return false;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sentence-similarity-ii"}