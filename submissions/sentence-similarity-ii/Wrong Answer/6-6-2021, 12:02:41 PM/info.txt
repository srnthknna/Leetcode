{"id":504038109,"lang":"java","time":"8 months, 3 weeks","timestamp":1623006161,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/504038109/","is_pending":"Not Pending","title":"Sentence Similarity II","memory":"N/A","code":"class Solution {\n    public boolean areSentencesSimilarTwo(String[] sentence1, String[] sentence2, List<List<String>> similarPairs) {\n        if (sentence1.length != sentence2.length) return false;\n        \n        Map<String, Integer> words = new HashMap<>();\n        int index = 0;\n        for (List<String> pairs : similarPairs) {\n            if (!words.containsKey(pairs.get(0))) \n                words.put(pairs.get(0), index++);\n            if (!words.containsKey(pairs.get(1))) \n                words.put(pairs.get(1), index++);\n        }\n        UF uf = new UF(words.size());\n        \n        for (List<String> pairs : similarPairs) {\n            uf.union(words.get(pairs.get(0)), words.get(pairs.get(1)));\n        }\n        \n        for (int i = 0; i < sentence1.length; i++) {\n            if (sentence1[i].equals(sentence2[i])) continue;\n            if (!words.containsKey(sentence1[i])) return false;\n            if (!words.containsKey(sentence2[i])) return false;\n            if (!uf.isConnected(words.get(sentence1[i]), words.get(sentence2[i])));\n        }\n        return true;\n    }\n    \n    class UF {\n        int count;\n        int[] root;\n        int[] size;\n        \n        public UF (int n) {\n            count = n;\n            root = new int[n];\n            size = new int[n];\n            \n            for (int i = 0; i < n; i++) {\n                root[i] = i;\n                size[i] = 1;\n            }\n        }\n        \n        public int count () {\n            return count;\n        }\n        \n        public int find (int p) {\n            if (p != root[p]) {\n                return find(root[p]);\n            }\n            return p;\n        }\n        \n        public boolean isConnected (int p, int q) {\n            return find(p) == find(q);\n        }\n        \n        public void union (int p, int q) {\n            int rootP = find(p);\n            int rootQ = find(q);\n            \n            if (rootP == rootQ) return;\n            \n            if (size[rootP] < size[rootQ]) {\n                root[rootP] = rootQ;\n                size[rootP] += size[rootQ];\n            } else {\n                root[rootQ] = rootP;\n                size[rootQ] += size[rootP];\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111000000000000000000001010101010101010101010101010101010101010101010101010101010110","title_slug":"sentence-similarity-ii"}