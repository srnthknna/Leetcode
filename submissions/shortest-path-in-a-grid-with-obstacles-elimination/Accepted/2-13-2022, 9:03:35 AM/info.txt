{"id":640655990,"lang":"java","time":"2Â weeks","timestamp":1644771815,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/640655990/","is_pending":"Not Pending","title":"Shortest Path in a Grid with Obstacles Elimination","memory":"47.5 MB","code":"class Solution {\n    private static int[][] DIRS = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n    public int shortestPath(int[][] grid, int k) {\n        int row = grid.length, col = grid[0].length;\n        if (row == 0 || col == 0) return 0;\n        \n        boolean[][] visited = new boolean[row][col];\n        int[][] obstacle = new int[row][col];\n        obstacle[0][0] = grid[0][0];\n        \n        Queue<int[]> queue = new LinkedList<>();\n        queue.offer(new int[]{0, 0, obstacle[0][0]});\n\n        int level = 0;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                int[] curr = queue.poll();\n                \n                if (curr[0] == row - 1 && curr[1] == col - 1) return level;\n                \n                for (int[] dir : DIRS) {\n                    int nextX = dir[0] + curr[0], nextY = dir[1] + curr[1];\n                    \n                    if (nextX < 0 || nextY < 0 || nextX >= row || nextY >= col) continue;\n                    \n                    int oldObstacle = obstacle[nextX][nextY], newObstacle = curr[2] + grid[nextX][nextY];\n                    \n                    if (!visited[nextX][nextY] && newObstacle <= k || oldObstacle > newObstacle && newObstacle <= k) {\n                        obstacle[nextX][nextY] = newObstacle;\n                        queue.offer(new int[] {nextX, nextY, newObstacle});\n                        visited[nextX][nextY] = true;\n                    }\n                }\n            }\n            level++;\n        }\n        return -1;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-a-grid-with-obstacles-elimination"}