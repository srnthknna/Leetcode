{"id":494674328,"lang":"java","time":"9 months, 2 weeks","timestamp":1621304176,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/494674328/","is_pending":"Not Pending","title":"Shortest Unsorted Continuous Subarray","memory":"40.1 MB","code":"class Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        int n = nums.length, left = n, right = 0;\n        Deque<Integer> stack = new ArrayDeque<>();\n        for (int i = 0; i < n; i++) {\n            while (!stack.isEmpty() && nums[stack.peek()] > nums[i]) {\n                left = Math.min(left, stack.pop());\n            }\n            stack.push(i);\n        }\n        \n        \n        stack = new ArrayDeque<>();\n        for (int i = n - 1; i >= 0; i--) {\n            while (!stack.isEmpty() && nums[stack.peek()] < nums[i]) {\n                right = Math.max(right, stack.pop());\n            }\n            stack.push(i);\n        }\n        \n        return right - left > 0 ? right - left + 1 : 0;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-unsorted-continuous-subarray"}