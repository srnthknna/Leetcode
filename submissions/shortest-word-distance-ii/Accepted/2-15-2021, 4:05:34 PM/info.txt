{"id":456540451,"lang":"java","time":"1Â year","timestamp":1613433934,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/456540451/","is_pending":"Not Pending","title":"Shortest Word Distance II","memory":"45.8 MB","code":"class WordDistance {\n    HashMap<String, ArrayList<Integer>> locations;\n    public WordDistance(String[] words) {\n        this.locations = new HashMap<>();\n        \n        for (int i = 0; i < words.length; i++) {\n            ArrayList<Integer> loc = locations.getOrDefault(words[i], new ArrayList<>());\n            loc.add(i);\n            locations.put(words[i], loc);\n        }\n    }\n    \n    public int shortest(String word1, String word2) {\n        ArrayList<Integer> loc1 = locations.get(word1), loc2 = locations.get(word2);\n        int i1 = 0, i2 = 0, minDistance = Integer.MAX_VALUE;\n        while (i1 < loc1.size() && i2 < loc2.size()) {\n            minDistance = Math.min(minDistance, Math.abs(loc1.get(i1) - loc2.get(i2)));\n            if (loc1.get(i1) < loc2.get(i2)) i1++;\n            else i2++;\n        }\n        return minDistance;\n    }\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * WordDistance obj = new WordDistance(words);\n * int param_1 = obj.shortest(word1,word2);\n */","compare_result":"111111111111","title_slug":"shortest-word-distance-ii"}