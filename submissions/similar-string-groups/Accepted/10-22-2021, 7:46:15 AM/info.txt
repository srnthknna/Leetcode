{"id":575418964,"lang":"java","time":"4 months, 1 week","timestamp":1634913975,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/575418964/","is_pending":"Not Pending","title":"Similar String Groups","memory":"42.1 MB","code":"class Solution {\n    public int numSimilarGroups(String[] strs) {\n        Map<String, Set<String>> g = new HashMap<>();\n        buildGraph(strs, g);\n        int count = 0;\n        Set<String> visited = new HashSet<>();\n        \n        for (String key : g.keySet()) {\n            if (visited.add(key)) {\n                dfs(visited, g, key);\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private void dfs(Set<String> visited, Map<String, Set<String>> g, String a) {\n        for (String neigh : g.get(a)) {\n            if (visited.add(neigh)) {\n                dfs(visited, g, neigh);\n            }\n        }\n    }\n    \n    private void buildGraph(String[] strs, Map<String, Set<String>> g) {\n        for (String s : strs) {\n            g.put(s, new HashSet<>());\n        }\n        int n = strs.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (isSimilar(strs[i], strs[j])) {\n                    g.get(strs[i]).add(strs[j]);\n                    g.get(strs[j]).add(strs[i]);\n                }\n            }\n        }\n    }\n    \n    private boolean isSimilar(String a, String b) {\n        int diff = 0;\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                diff++;\n                if (diff > 2)\n                    return false;\n            }\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"similar-string-groups"}