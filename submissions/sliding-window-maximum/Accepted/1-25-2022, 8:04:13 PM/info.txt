{"id":627978070,"lang":"java","time":"1Â month","timestamp":1643169853,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/627978070/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"54 MB","code":"class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        if (nums == null || nums.length == 0) return new int[0];\n        int n = nums.length, ri = 0;\n        if (n * k == 0) return new int[0];\n        \n        ArrayDeque<Integer> dequeue = new ArrayDeque<>();\n        int[] result = new int[n - k + 1];\n        for (int i = 0; i < n; i++) {\n            while (!dequeue.isEmpty() && dequeue.peek() == i - k) dequeue.pollFirst();\n            \n            while (!dequeue.isEmpty() && nums[dequeue.peekLast()] <= nums[i]) dequeue.pollLast();\n            \n            dequeue.offer(i);\n            \n            if (i >= k - 1) {\n                result[ri++] = nums[dequeue.peekFirst()];\n            }\n        }\n        return result;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"sliding-window-maximum"}