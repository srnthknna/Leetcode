{"id":635877218,"lang":"java","time":"3Â weeks","timestamp":1644172282,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/635877218/","is_pending":"Not Pending","title":"Smallest Sufficient Team","memory":"43.1 MB","code":"class Solution {\n    List<Integer> sol = new ArrayList<>();\n    \n    public int[] smallestSufficientTeam(String[] req_skills, List<List<String>> people) {\n        int nskills = req_skills.length, npeople = people.size();\n        Map<String, Integer> skillMap = new HashMap<>();\n        for (int i = 0; i < nskills; i++)\n            skillMap.put(req_skills[i], i);\n        \n        int[] peopleSkills = new int[npeople];\n        for (int i = 0; i < npeople; i++) {\n            for (String skill : people.get(i)) {\n                if (skillMap.containsKey(skill))\n                peopleSkills[i] |= (1 << skillMap.get(skill));\n            }\n        }\n        \n        search(peopleSkills, new ArrayList<>(), nskills, 0);\n        int answer[] = new int[sol.size()], ind = 0;\n        for (int index : sol)\n            answer[ind++] = index;\n        \n        return answer;\n    }\n    \n    private void search(int[] peopleSkills, List<Integer> currSol, int nskills, int skillMask) {\n        if (skillMask == (1 << nskills) - 1) {\n            if (sol.size() == 0 | currSol.size() < sol.size()) {\n                sol = new ArrayList<>(currSol);\n            }\n            return;\n        }\n        \n        if (sol.size() != 0 && currSol.size() >= sol.size()) return;\n        int zeroBit = 0;\n        while (((skillMask>>zeroBit)&1) == 1) zeroBit++;  \n        for (int i = 0; i < peopleSkills.length; i++) {\n            if (((peopleSkills[i]>>zeroBit)&1) == 1) {\n                currSol.add(i);\n                search(peopleSkills, currSol, nskills, skillMask | peopleSkills[i]);\n                currSol.remove(currSol.size() - 1);\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"smallest-sufficient-team"}