{"id":635869865,"lang":"java","time":"3Â weeks","timestamp":1644171564,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/635869865/","is_pending":"Not Pending","title":"Smallest Sufficient Team","memory":"N/A","code":"class Solution {\n    List<Integer> sol = new ArrayList<>();\n    \n    public int[] smallestSufficientTeam(String[] req_skills, List<List<String>> people) {\n        int nskills = req_skills.length, npeople = people.size();\n        Map<String, Integer> skillMap = new HashMap<>();\n        for (int i = 0; i < nskills; i++)\n            skillMap.put(req_skills[i], i);\n        \n        int[] peopleSkills = new int[npeople];\n        for (int i = 0; i < npeople; i++) {\n            for (String skill : people.get(i))\n            peopleSkills[i] |= (1 << skillMap.get(skill));\n        }\n        \n        search(peopleSkills, 0, new ArrayList<>(), nskills, 0);\n        int answer[] = new int[sol.size()], ind = 0;\n        for (int index : sol)\n            answer[ind++] = index;\n        \n        return answer;\n    }\n    \n    private void search(int[] peopleSkills, int curr, List<Integer> currSol, int nskills, int skillMask) {\n        if (curr == peopleSkills.length) {\n            if (skillMask == (1 << nskills) - 1) {\n                if (sol.size() == 0 | currSol.size() < sol.size()) {\n                    sol = new ArrayList<>(currSol);\n                }\n            }\n            return;\n        }\n        \n        if (sol.size() != 0 && currSol.size() >= sol.size()) return;\n        search(peopleSkills, curr + 1, currSol, nskills, skillMask);\n        currSol.add(curr);\n        search(peopleSkills, curr + 1, currSol, nskills, skillMask | peopleSkills[curr]);\n        currSol.remove(currSol.size() - 1);\n    }\n}","compare_result":"11111111111000000000000000000000000000","title_slug":"smallest-sufficient-team"}