{"id":650103595,"lang":"java","time":"4 hours, 49 minutes","timestamp":1645991577,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/650103595/","is_pending":"Not Pending","title":"Solving Questions With Brainpower","memory":"107.3 MB","code":"// https://leetcode.com/problems/solving-questions-with-brainpower/\n// Solution is dp based\n// we start from right to left\n// we calculate if the future index\n// if the future index is within the array length then we update the points with current question points and future question points calculated in dp\n// if its more than the array length then we just consider current question points\n// lastly we need to find if the curren index has a next question \n// in which case we find the max between this index and the next index\n// this last line actually means if we want to skip ith question or not\nclass Solution {\n    public long mostPoints(int[][] questions) {\n        int n = questions.length;\n        long dp[] = new long[n];\n        for (int i = n - 1; i >= 0; i--) {\n            int fIndex = i + questions[i][1] + 1;\n            if (fIndex < n) {\n                dp[i] = dp[fIndex] + questions[i][0];\n            } else {\n                dp[i] = questions[i][0];\n            }\n            \n            if (i < n - 1) {\n                // either choose this question and skip this question\n                // if we skip then we choose the previous next question in future pointss whichever is maximum\n                dp[i] = Math.max(dp[i], dp[i + 1]);\n            }\n        }\n        return dp[0];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"solving-questions-with-brainpower"}