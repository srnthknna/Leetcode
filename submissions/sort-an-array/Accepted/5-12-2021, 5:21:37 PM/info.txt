{"id":492397016,"lang":"java","time":"9 months, 3 weeks","timestamp":1620865297,"status_display":"Accepted","runtime":"2110 ms","url":"/submissions/detail/492397016/","is_pending":"Not Pending","title":"Sort an Array","memory":"51.8 MB","code":"class Solution {\n    public int[] sortArray(int[] nums) {\n        if (nums.length <= 1) return nums;\n        quicksort(nums, 0, nums.length - 1);\n        return nums;\n    }\n    \n    private int partision(int[] nums, int low, int high) {\n        int pivot = nums[high];\n        // Index of smaller element and\n        // indicates the right position\n        // of pivot found so far\n        int i = (low - 1);\n        for(int j = low; j <= high - 1; j++) {\n            // If current element is smaller\n            // than the pivot\n            if (nums[j] < pivot) {\n                // Increment index of\n                // smaller element\n                i++;\n                swap(nums, i, j);\n            }\n        }\n        swap(nums, i + 1, high);\n        return (i + 1);\n    }\n    \n    private void quicksort(int[] nums, int low, int high) {\n        if (low < high) {\n            int pivot = partision(nums, low, high);\n            quicksort(nums, low, pivot - 1);\n            quicksort(nums, pivot + 1, high);\n        }\n    }\n    \n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}","compare_result":"1111111111111","title_slug":"sort-an-array"}