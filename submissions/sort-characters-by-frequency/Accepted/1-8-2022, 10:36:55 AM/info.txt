{"id":615710053,"lang":"java","time":"1 month, 2 weeks","timestamp":1641667015,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/615710053/","is_pending":"Not Pending","title":"Sort Characters By Frequency","memory":"41.9 MB","code":"class Solution {\n    public String frequencySort(String s) {\n        Map<Character, Integer> counts = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            counts.put(c, counts.getOrDefault(c, 0) + 1);\n        }\n        \n//         List<Character> chars = new ArrayList<>(counts.keySet());\n//         Collections.sort(chars, (char1, char2) -> counts.get(char2) - counts.get(char1));\n        \n//         StringBuilder sb = new StringBuilder();\n//         for (char c : chars) {\n//             int copies = counts.get(c);\n//             for (int i = 0; i < copies; i++) {\n//                 sb.append(c);\n//             }\n//         }\n//         return sb.toString();\n        \n        // But here instead of sorting lets try bucketing\n        int maxFrequency = Collections.max(counts.values());\n        List<List<Character>> bucketChars = new ArrayList<>();\n        for (int i = 0; i < maxFrequency; i++) {\n            bucketChars.add(new ArrayList<>());\n        }\n        \n        for (char c : counts.keySet()) {\n            bucketChars.get(counts.get(c) - 1).add(c);\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        for (int freq = maxFrequency - 1; freq >= 0; freq--) {\n            for (char c : bucketChars.get(freq)) {\n                for (int i = 0; i < freq + 1; i++) {\n                    sb.append(c);\n                }\n            }\n        }\n        return sb.toString();\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"sort-characters-by-frequency"}