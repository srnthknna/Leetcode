{"id":437683804,"lang":"java","time":"1 year, 1 month","timestamp":1609624363,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/437683804/","is_pending":"Not Pending","title":"Sort List","memory":"47.5 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null) return head;\n        \n        ListNode temp = head;\n        ListNode slow = head;\n        ListNode fast = head;\n        \n        while (fast != null && fast.next != null) {\n            temp = slow;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        temp.next = null;\n        \n        ListNode left = sortList(head);\n        ListNode right = sortList(slow);\n        \n        return merge(left, right);\n    }     \n    \n    private ListNode merge(ListNode l1, ListNode l2) {\n        ListNode head = new ListNode(0);\n        ListNode current = head;\n        while (l1 != null && l2 != null) {\n            if (l1.val < l2.val) {\n                current.next = l1;\n                l1 = l1.next;\n            } else {\n                current.next = l2;\n                l2 = l2.next;\n            }\n            current = current.next;\n        }\n        \n        if (l1 !=  null) {\n            current.next = l1;\n        }\n        \n        if (l2 != null) {\n            current.next = l2;\n        }\n\n        return head.next;\n    }\n}","compare_result":"1111111111111111111111111111","title_slug":"sort-list"}