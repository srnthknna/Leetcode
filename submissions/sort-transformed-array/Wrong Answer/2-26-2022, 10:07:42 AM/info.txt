{"id":649341266,"lang":"java","time":"1 day, 6 hours","timestamp":1645898862,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/649341266/","is_pending":"Not Pending","title":"Sort Transformed Array","memory":"N/A","code":"// Yes the generic way is to update the array with new values and sorting it\n// its O(n) to find new values and O(nlogn) to sort them lets try that first\nclass Solution1 {\n    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {\n        for (int i = 0; i < nums.length; i++) {\n            nums[i] = nums[i] * nums[i] * a + b * nums[i] + c;\n        }\n        Arrays.sort(nums);\n        return nums;\n    }\n}\n\n// Next will be to use TreeSet to store the values in the sorted order\nclass Solution {\n    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {\n        TreeSet<Integer> vals = new TreeSet<>();\n        for (int i = 0; i < nums.length; i++) {\n            vals.add(nums[i] * nums[i] * a + b * nums[i] + c);\n        }\n        int i = 0;\n        int[] result = new int[nums.length];\n        for (int val : vals) {\n            result[i++] = val;\n        }\n        return result;\n    }\n}","compare_result":"11110000110000000000000001000000000000001000000000000100000011001010000000000000100010000000000000000000010000","title_slug":"sort-transformed-array"}