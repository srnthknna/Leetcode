{"id":437816229,"lang":"java","time":"1 year, 1 month","timestamp":1609644933,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/437816229/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"N/A","code":"class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        List<Integer> result = new ArrayList<>();\n        if (matrix.length == 0) return result;\n        int rowBegin = 0, colBegin = 0, rowEnd = matrix.length - 1, colEnd = matrix[0].length - 1; \n        \n        while (rowBegin <= rowEnd && colBegin <= colEnd ) {\n            for (int i = colBegin; i <= colEnd; i++) {\n                result.add(matrix[rowBegin][i]);\n            }\n            rowBegin++;\n            \n            for (int i = rowBegin; i <= rowEnd; i++) {\n                result.add(matrix[i][colEnd]);\n            }\n            colEnd--;\n            \n            if (rowBegin < rowEnd)\n            for (int i = colEnd; i >= colBegin; i--) {\n                result.add(matrix[rowEnd][i]);\n            }\n            rowEnd--;\n            \n            if (colBegin < colEnd)\n            for (int i = rowEnd; i >= rowBegin; i--) {\n                result.add(matrix[i][colBegin]);\n            }\n            colBegin++;\n        }\n        return result;\n    }\n}","compare_result":"1111111000110111010001","title_slug":"spiral-matrix"}