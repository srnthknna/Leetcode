{"id":585070305,"lang":"java","time":"3 months, 2 weeks","timestamp":1636560153,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/585070305/","is_pending":"Not Pending","title":"Split BST","memory":"37.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode[] splitBST(TreeNode root, int target) {\n        if (root == null) return new TreeNode[]{null, null};\n        else if (root.val <= target) {\n            TreeNode[] bst = splitBST(root.right, target);\n            root.right = bst[0];\n            bst[0] = root;\n            return bst;\n        } else {\n            TreeNode[] bst = splitBST(root.left, target);\n            root.left = bst[1];\n            bst[1] = root;\n            return bst;\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"split-bst"}