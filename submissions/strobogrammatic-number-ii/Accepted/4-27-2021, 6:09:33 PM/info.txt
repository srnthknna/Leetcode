{"id":486065039,"lang":"java","time":"10Â months","timestamp":1619572173,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/486065039/","is_pending":"Not Pending","title":"Strobogrammatic Number II","memory":"49.4 MB","code":"class Solution {\n    char[][] mapping = new char[][] {{'0', '0'}, {'1', '1'}, {'6', '9'}, {'8', '8'}, {'9', '6'}};\n    public List<String> findStrobogrammatic(int n) {\n        List<String> res = new ArrayList<>();\n        if (n < 1) return res;\n        helper(res, new char[n], 0, n - 1);\n        return res;\n    }\n    \n    private void helper(List<String> res, char[] chrs, int low, int high) {\n        if (low > high ) {\n            if (chrs.length == 1 || chrs[0] != '0') {\n                res.add(String.valueOf(chrs));\n            }\n            return;\n        }\n        \n        for (char[] map : mapping) {\n        \n            if (low == high && map[0] != map[1]) {\n                continue;\n            }\n            chrs[low] = map[0];\n            chrs[high] = map[1];\n            helper(res, chrs, low + 1, high - 1);\n        }\n        \n    }\n}","compare_result":"11111111111111","title_slug":"strobogrammatic-number-ii"}