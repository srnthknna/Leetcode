{"id":617708194,"lang":"java","time":"1 month, 2 weeks","timestamp":1641916701,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/617708194/","is_pending":"Not Pending","title":"Substring with Concatenation of All Words","memory":"N/A","code":"class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        Map<String, Integer> map = new HashMap<>();\n        \n        int counter = map.size(), begin = 0, end = 0;\n        List<Integer> ans = new ArrayList<>();\n        int wordSize = words[0].length(), len = wordSize * words.length;\n        \n        if (words.length == 0 || s.length() < len) return ans;\n        \n        for (int i = 0; i < wordSize; i++) {\n            buildMap(words, map);\n            counter = map.size();\n            begin = i; end = i;\n            \n            while (end + wordSize - 1 < s.length()) {\n                String endWord = s.substring(end, end + wordSize);\n                \n                if (map.containsKey(endWord)) {\n                    map.put(endWord, map.get(endWord) - 1);\n                    if (map.get(endWord) == 0) counter--;\n                }\n                \n                if (end + wordSize - begin == len) {\n                    if (counter == 0) {\n                        ans.add(begin);\n                    }\n                    \n                    String startWord = s.substring(begin, begin + wordSize);\n                    \n                    if (map.containsKey(startWord)) {\n                        map.put(startWord, map.get(startWord) + 1);\n                        if (map.get(startWord) > 0) counter++;\n                    }\n                    begin += wordSize;\n                }\n                end += wordSize;\n            }\n        }\n        return ans;\n    }\n    \n    private void buildMap(String[] words, Map<String, Integer> map) {\n        map.clear();\n        for (String word : words) {\n            map.put(word, map.getOrDefault(word, 0) + 1);\n        }\n    }\n}","compare_result":"11111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"substring-with-concatenation-of-all-words"}