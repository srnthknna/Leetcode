{"id":635219044,"lang":"java","time":"3 weeks, 1 day","timestamp":1644094077,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/635219044/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"42.5 MB","code":"class Solution {\n    public void solveSudoku(char[][] board) {\n        solveSudoku(board, 0 , 0);\n    }\n    \n    private boolean solveSudoku(char[][] board, int i, int j) {\n        if (i == board.length) return true;\n        int ni = 0, nj = 0;\n        if (j == board[0].length - 1) {\n            ni = i + 1;\n            nj = 0;\n        } else {\n            ni = i;\n            nj = j + 1;\n        }\n        \n        if (board[i][j] != '.') {\n            if (solveSudoku(board, ni, nj))\n                return true;\n        } else {\n            for (char p = '1'; p <= '9'; p++) {\n                if (isValid(board, i, j, p)) {\n                    board[i][j] = p;\n                    if (solveSudoku(board, ni, nj))\n                        return true;\n                    board[i][j] = '.';\n                }\n            }\n        }\n        return false;\n    }\n    \n    private boolean isValid(char[][] board, int i, int j, char p) {\n        //check col\n        for (int aj = 0; aj < board[0].length; aj++) {\n            if (board[i][aj] == p) return false;\n        }\n        \n        // check row\n        for (int ai = 0; ai < board.length; ai++) {\n            if (board[ai][j] == p) return false;\n        }\n        \n        // check submatrix\n        int smi = i / 3 * 3, smj = j / 3 * 3;\n        for (int ai = 0; ai < 3; ai++) {\n            for (int aj = 0; aj < 3; aj++) {\n                if (board[ai + smi][aj + smj] == p) return false;\n            }\n        }\n        return true;\n            \n    }\n}","compare_result":"111111","title_slug":"sudoku-solver"}