{"id":629022772,"lang":"java","time":"1Â month","timestamp":1643299354,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/629022772/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"51.2 MB","code":"class Solution {\n    int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    public void solve(char[][] board) {\n        if (board == null || board.length == 0) return;\n        int row = board.length, col = board[0].length;\n        \n        for (int i = 0; i < col; i++) {\n            dfs(board, 0, i);\n            dfs(board, row - 1, i);\n        }\n        \n        for (int i = 0; i < row; i++) {\n            dfs(board, i, 0);\n            dfs(board, i, col - 1);\n        }\n        \n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                if (board[i][j] == 'O')\n                    board[i][j] = 'X';\n                else if (board[i][j] == 'E') {\n                    board[i][j] = 'O';\n                }\n            }\n        }\n    }\n    \n    private void dfs(char[][] board, int i, int j) {\n        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != 'O') return;\n        board[i][j] = 'E';\n        for (int[] d : dirs) {\n            dfs(board, i + d[0], j + d[1]);\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions"}