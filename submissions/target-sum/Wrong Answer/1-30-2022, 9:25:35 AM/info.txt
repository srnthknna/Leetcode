{"id":631045496,"lang":"java","time":"4Â weeks","timestamp":1643563535,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/631045496/","is_pending":"Not Pending","title":"Target Sum","memory":"N/A","code":"class Solution {\n    public int findTargetSumWays(int[] nums, int target) {\n        int total = Arrays.stream(nums).sum(), n = nums.length;\n        int[][] dp = new int[n + 1][total + 1];\n        \n        for (int i = 0; i <= n; i++)\n            dp[i][0] = 1;\n        \n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= total; j++) {\n                if (nums[i - 1] <= j) {\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];\n                } else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        \n        \n        return Math.abs(target) > total || target == 0 ? 0 : dp[n][(target + total) / 2];\n    }\n}","compare_result":"1111111010111101110101111110111001100011011111011111111111111111111111111111111111111111111111111111111111111111110000010111111100000000010","title_slug":"target-sum"}