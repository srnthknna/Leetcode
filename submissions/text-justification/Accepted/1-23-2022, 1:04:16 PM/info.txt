{"id":626287867,"lang":"java","time":"1Â month","timestamp":1642971856,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/626287867/","is_pending":"Not Pending","title":"Text Justification","memory":"37.3 MB","code":"class Solution {\n    public List<String> fullJustify(String[] words, int maxWidth) {\n        List<String> result = new ArrayList<>();\n        int index = 0, n = words.length;\n        \n        while (index < n) {\n            int totalChars = words[index].length();\n            int last = index + 1;\n            \n            while (last < n) {\n                if (totalChars + 1 + words[last].length() > maxWidth) break;\n                else {\n                    totalChars += 1 + words[last].length();\n                    last++;\n                }\n            }\n            \n            int gaps = last - index - 1;\n            StringBuilder sb = new StringBuilder();\n            \n            if (last == n || gaps == 0) {\n                for (int i = index; i < last; i++) {\n                    sb.append(words[i]);\n                    sb.append(' ');\n                }\n                sb.deleteCharAt(sb.length() - 1);\n                while (sb.length() < maxWidth) {\n                    sb.append(' ');\n                }\n            } else {\n                int space = (maxWidth - totalChars) / gaps;\n                int rest = (maxWidth - totalChars) % gaps;\n                for (int i = index; i < last - 1; i++) {\n                    sb.append(words[i]);\n                    sb.append(' ');\n                    \n                    for (int j = 0; j < space + (i - index < rest ? 1 : 0); j++) {\n                        sb.append(' ');\n                    }\n                }\n                sb.append(words[last - 1]);\n            }\n            result.add(sb.toString());\n            index = last;\n        }\n        return result;\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"text-justification"}