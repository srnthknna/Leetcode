{"id":618011670,"lang":"java","time":"1 month, 2 weeks","timestamp":1641953856,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/618011670/","is_pending":"Not Pending","title":"The Maze","memory":"39.8 MB","code":"class Solution {\n    public boolean hasPath(int[][] maze, int[] start, int[] destination) {\n        boolean[][] visited = new boolean[maze.length][maze[0].length];\n        Queue<int[]> queue = new LinkedList<>();\n        queue.offer(start);\n        visited[start[0]][start[1]] = true;\n        int[][] dirs = {{0 , 1}, {0 , -1}, {1, 0}, {- 1, 0}};\n        \n        while (!queue.isEmpty()) {\n            int[] curr = queue.poll();\n            \n            if (curr[0] == destination[0] && curr[1] == destination[1]) \n                return true;\n            \n            for (int[] dir : dirs) {\n                int x = curr[0] + dir[0];\n                int y = curr[1] + dir[1];\n                \n                while (x >= 0 && x < maze.length && y >= 0 && y < maze[0].length && maze[x][y] == 0) {\n                    x += dir[0];\n                    y += dir[1];\n                }\n                                \n                if (!visited[x - dir[0]][y - dir[1]]) {\n                    queue.add(new int[] {x - dir[0], y - dir[1]});\n                    visited[x - dir[0]][y - dir[1]] = true;\n                }\n            }\n        }\n        return false;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-maze"}