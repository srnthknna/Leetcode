{"id":625446377,"lang":"java","time":"1Â month","timestamp":1642876008,"status_display":"Accepted","runtime":"230 ms","url":"/submissions/detail/625446377/","is_pending":"Not Pending","title":"Time Needed to Inform All Employees","memory":"137.3 MB","code":"class Solution {\n    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {\n        Map<Integer, List<Integer>> graph = new HashMap<>();\n        \n        for (int i = 0; i < manager.length; i++) {\n            int curr = manager[i];\n            if (!graph.containsKey(curr)) {\n                graph.put(curr, new ArrayList<>());\n            }\n            graph.get(curr).add(i);\n        }\n        \n        return dfs(headID, graph, informTime);\n    }\n    \n    private int dfs(int currId, Map<Integer, List<Integer>> graph, int[] informTime) {\n        int max = 0;\n        if (!graph.containsKey(currId)) {\n            return max;\n        }\n        for (int reportee : graph.get(currId)) {\n            max = Math.max(max, dfs(reportee, graph, informTime));\n        }\n        return max + informTime[currId];\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"time-needed-to-inform-all-employees"}