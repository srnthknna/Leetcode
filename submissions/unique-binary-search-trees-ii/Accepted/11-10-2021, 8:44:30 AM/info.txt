{"id":585087518,"lang":"java","time":"3 months, 2 weeks","timestamp":1636562670,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/585087518/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"40 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private List<TreeNode> generateTrees(int start, int end) {\n        List<TreeNode> allTrees = new LinkedList<>();\n        if (start > end) {\n            allTrees.add(null);\n            return allTrees;\n        }\n        \n        for (int i = start; i <= end; i++) {\n            List<TreeNode> leftTrees = generateTrees(start, i - 1);\n            List<TreeNode> rightTrees = generateTrees(i + 1, end);\n            \n            for (TreeNode l : leftTrees) {\n                for (TreeNode r : rightTrees) {\n                    TreeNode current = new TreeNode(i);\n                    current.left = l;\n                    current.right = r;\n                    allTrees.add(current);\n                }\n            }\n        }\n        return allTrees;\n    }\n    \n    public List<TreeNode> generateTrees(int n) {\n        if (n == 0) return new LinkedList<TreeNode>();\n        return generateTrees(1, n);\n    }\n}","compare_result":"11111111","title_slug":"unique-binary-search-trees-ii"}