{"id":532175747,"lang":"java","time":"6 months, 4 weeks","timestamp":1627920425,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/532175747/","is_pending":"Not Pending","title":"Verifying an Alien Dictionary","memory":"39 MB","code":"class Solution {\n    public int[] map;\n    public boolean isAlienSorted(String[] words, String order) {\n        map = new int[26];\n        for (int i = 0; i < order.length(); i++) \n            map[order.charAt(i) - 'a'] = i;\n        \n        for (int i = 1; i < words.length; i++) {\n            if (compare(words[i - 1], words[i]) > 0)\n                return false;\n        }\n        return true;\n    }\n    \n    private int compare(String word1, String word2) {\n        int i = 0;\n        int j = 0;\n        int compare_val = 0;\n        \n        while (i < word1.length() && j < word2.length() && compare_val == 0) {\n            compare_val = map[word1.charAt(i) - 'a'] - map[word2.charAt(j) - 'a'];\n            i++;\n            j++;\n        }\n        \n        if (compare_val == 0) {\n            return word1.length() - word2.length();\n        }\n        return compare_val;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"verifying-an-alien-dictionary"}