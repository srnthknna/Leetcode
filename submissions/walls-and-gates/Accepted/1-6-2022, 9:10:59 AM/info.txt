{"id":614359304,"lang":"java","time":"1 month, 3 weeks","timestamp":1641489059,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/614359304/","is_pending":"Not Pending","title":"Walls and Gates","memory":"54.8 MB","code":"class Solution {\n    public void wallsAndGates(int[][] rooms) {\n        int[] dx = new int[] {0, 0, 1, -1};\n        int[] dy = new int[] {1, -1, 0 ,0};\n\n        if (rooms == null || rooms.length == 0) return;\n        int row = rooms.length, col = rooms[0].length;\n        \n        int EMPTY = Integer.MAX_VALUE, GATE = 0;\n        \n        Queue<int[]> queue = new LinkedList<>();\n        \n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                if (rooms[i][j] == GATE) {\n                    queue.offer(new int[] {i, j});\n                }\n            }\n        }\n        \n        while (!queue.isEmpty()) {\n            int[] curr = queue.poll();\n            \n            for (int i = 0; i < 4; i++) {\n                int curr_row = curr[0];\n                int curr_col = curr[1];\n                \n                int next_row = curr_row + dx[i];\n                int next_col = curr_col + dy[i];\n                \n                if (next_row < 0 || next_row >= row || next_col < 0 || next_col >= col || rooms[next_row][next_col] != EMPTY) {\n                    continue;\n                }\n                \n                rooms[next_row][next_col] = rooms[curr_row][curr_col] + 1;\n                queue.offer(new int[] {next_row, next_col});\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates"}