{"id":613106967,"lang":"java","time":"1 month, 3 weeks","timestamp":1641329024,"status_display":"Accepted","runtime":"165 ms","url":"/submissions/detail/613106967/","is_pending":"Not Pending","title":"Word Ladder","memory":"114.7 MB","code":"class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        Queue<String> queue = new LinkedList<>();\n        Set<String> words = new HashSet<>(wordList);\n        int level = 0;\n        \n        words.remove(beginWord);\n        queue.add(beginWord);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            level++;\n            for (int i = 0; i < size; i++) {\n                String currWord = queue.poll();\n                if (currWord.equals(endWord)) return level;\n                List<String> neighs = neighbhors(currWord);\n                for (String neigh : neighs) {\n                    if (words.contains(neigh)) {\n                        queue.add(neigh);\n                        words.remove(neigh);\n                    }\n                }\n            }\n        }\n        return 0;\n    }\n    \n    private List<String> neighbhors(String currWord) {\n        char[] chars = currWord.toCharArray();\n        List<String> output = new ArrayList<>();\n        for (int i = 0; i < chars.length; i++) {\n            char temp = chars[i];\n            for (char c = 'a'; c <= 'z'; c++) {\n                chars[i] = c;\n                output.add(new String(chars));\n            }\n            chars[i] = temp;\n        }\n        return output;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"word-ladder"}