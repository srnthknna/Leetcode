{"id":490132239,"lang":"java","time":"9 months, 3 weeks","timestamp":1620413785,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/490132239/","is_pending":"Not Pending","title":"Word Pattern","memory":"36.8 MB","code":"class Solution {\n    public boolean wordPattern(String pattern, String s) {\n        String[] words = s.split(\" \");\n        Map<Character, String> table = new HashMap<>();\n        Map<String, Character> revTab = new HashMap<>();\n        if (words.length != pattern.length()) return false;\n        \n        for (int i = 0; i < pattern.length(); i++) {\n            Character c = pattern.charAt(i);\n            if (table.containsKey(c) && revTab.containsKey(words[i])) {\n                if (!words[i].equals(table.get(c))) return false;\n                if (revTab.get(words[i]) != c) return false;\n            } else if (table.containsKey(c) || revTab.containsKey(words[i])) {\n                return false;\n            } else {\n                table.put(c, words[i]);\n                revTab.put(words[i], c);\n            }\n        }\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"word-pattern"}