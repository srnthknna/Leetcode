{"id":638028102,"lang":"java","time":"2 weeks, 4 days","timestamp":1644428759,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/638028102/","is_pending":"Not Pending","title":"Word Subsets","memory":"87.9 MB","code":"class Solution {\n    public List<String> wordSubsets(String[] words1, String[] words2) {\n        List<String> result = new ArrayList<>();\n        int[] maxFrequencies = new int[26];\n        for (String word : words2) {\n            int[] currFrequencies = getFrequencies(word);\n            for (int i = 0; i < 26; i++) {\n                maxFrequencies[i] = Math.max(maxFrequencies[i], currFrequencies[i]);\n            }\n        }\n        \n        for (String word : words1) {\n            int[] currFrequencies = getFrequencies(word);\n            boolean isValid = true;\n            for (int i = 0; i < 26; i++) {\n                if (maxFrequencies[i] > currFrequencies[i]) {\n                    isValid = false;\n                    break;\n                }\n            }\n            if (isValid) result.add(word);\n        }\n        return result;\n    }\n    \n    private int[] getFrequencies(String word) {\n        int[] counts = new int[26];\n        for (char c : word.toCharArray())\n            counts[c - 'a']++;\n        return counts;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"word-subsets"}